{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/LENOVO/Desktop/Pbypass/hiddencooker/src/app/automation/blockchain.ts"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\n// Contract ABIs\r\nconst ERC20_ABI = [\r\n  \"function balanceOf(address) view returns (uint256)\",\r\n  \"function decimals() view returns (uint8)\",\r\n  \"function allowance(address,address) view returns (uint256)\",\r\n  \"function approve(address,uint256) returns (bool)\",\r\n  \"function transfer(address,uint256) returns (bool)\"\r\n];\r\n\r\nconst SWAP_ROUTER_ABI = [\r\n  \"function multicall(uint256 deadline, bytes[] calldata data) external\"\r\n];\r\n\r\nconst POSITION_MANAGER_ABI = [\r\n  {\r\n    \"inputs\": [\r\n      {\r\n        \"components\": [\r\n          { \"internalType\": \"address\", \"name\": \"token0\", \"type\": \"address\" },\r\n          { \"internalType\": \"address\", \"name\": \"token1\", \"type\": \"address\" },\r\n          { \"internalType\": \"uint24\", \"name\": \"fee\", \"type\": \"uint24\" },\r\n          { \"internalType\": \"int24\", \"name\": \"tickLower\", \"type\": \"int24\" },\r\n          { \"internalType\": \"int24\", \"name\": \"tickUpper\", \"type\": \"int24\" },\r\n          { \"internalType\": \"uint256\", \"name\": \"amount0Desired\", \"type\": \"uint256\" },\r\n          { \"internalType\": \"uint256\", \"name\": \"amount1Desired\", \"type\": \"uint256\" },\r\n          { \"internalType\": \"uint256\", \"name\": \"amount0Min\", \"type\": \"uint256\" },\r\n          { \"internalType\": \"uint256\", \"name\": \"amount1Min\", \"type\": \"uint256\" },\r\n          { \"internalType\": \"address\", \"name\": \"recipient\", \"type\": \"address\" },\r\n          { \"internalType\": \"uint256\", \"name\": \"deadline\", \"type\": \"uint256\" }\r\n        ],\r\n        \"internalType\": \"struct INonfungiblePositionManager.MintParams\",\r\n        \"name\": \"params\",\r\n        \"type\": \"tuple\"\r\n      }\r\n    ],\r\n    \"name\": \"mint\",\r\n    \"outputs\": [\r\n      { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" },\r\n      { \"internalType\": \"uint128\", \"name\": \"liquidity\", \"type\": \"uint128\" },\r\n      { \"internalType\": \"uint256\", \"name\": \"amount0\", \"type\": \"uint256\" },\r\n      { \"internalType\": \"uint256\", \"name\": \"amount1\", \"type\": \"uint256\" }\r\n    ],\r\n    \"stateMutability\": \"payable\",\r\n    \"type\": \"function\"\r\n  }\r\n];\r\n\r\n// Contract addresses\r\nexport const CONTRACTS = {\r\n  WPHRS: \"0x76aaaDA469D23216bE5f7C596fA25F282Ff9b364\",\r\n  USDC: \"0x72df0bcd7276f2dFbAc900D1CE63c272C4BCcCED\",\r\n  USDT: \"0xD4071393f8716661958F766DF660033b3d35fD29\",\r\n  SWAP_ROUTER: \"0x1A4DE519154Ae51200b0Ad7c90F7faC75547888a\",\r\n  POSITION_MANAGER: \"0xF8a1D4FF0f9b9Af7CE58E1fc1833688F3BFd6115\"\r\n};\r\n\r\nexport const FIXED_AMOUNTS = {\r\n  PHRS: 0.0005,\r\n  USDC: 0.01,\r\n  USDT: 0.01,\r\n  WPHRS: 0.0005\r\n};\r\n\r\nconst RPC_URL = \"https://testnet.dplabs-internal.com\";\r\n\r\n// Generate random wallet address\r\nexport function generateRandomAddress(): string {\r\n  const randomWallet = ethers.Wallet.createRandom();\r\n  return randomWallet.address;\r\n}\r\n\r\n// Get provider and signer\r\nexport function getProviderAndSigner(privateKey: string) {\r\n  const provider = new ethers.JsonRpcProvider(RPC_URL);\r\n  const signer = new ethers.Wallet(privateKey, provider);\r\n  return { provider, signer };\r\n}\r\n\r\n// Get token balance\r\nexport async function getTokenBalance(\r\n  tokenAddress: string, \r\n  walletAddress: string, \r\n  provider: ethers.JsonRpcProvider\r\n): Promise<number> {\r\n  try {\r\n    if (tokenAddress === \"PHRS\") {\r\n      const balance = await provider.getBalance(walletAddress);\r\n      return parseFloat(ethers.formatEther(balance));\r\n    }\r\n    \r\n    const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider);\r\n    const [balance, decimals] = await Promise.all([\r\n      contract.balanceOf(walletAddress),\r\n      contract.decimals()\r\n    ]);\r\n    \r\n    return parseFloat(ethers.formatUnits(balance, decimals));\r\n  } catch (error) {\r\n    console.error('Balance check failed:', error);\r\n    return 0;\r\n  }\r\n}\r\n\r\n// Approve token with timeout and better error handling\r\nexport async function approveToken(\r\n  tokenAddress: string,\r\n  spenderAddress: string,\r\n  amount: number,\r\n  signer: ethers.Wallet\r\n): Promise<ethers.TransactionResponse | null> {\r\n  try {\r\n    console.log(`Approving token ${tokenAddress} for ${spenderAddress}`);\r\n    \r\n    const contract = new ethers.Contract(tokenAddress, ERC20_ABI, signer);\r\n    \r\n    // Add timeout wrapper for contract calls\r\n    const timeoutPromise = (promise: Promise<any>, timeoutMs: number) => {\r\n      return Promise.race([\r\n        promise,\r\n        new Promise((_, reject) => \r\n          setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs)\r\n        )\r\n      ]);\r\n    };\r\n    \r\n    const decimals = await timeoutPromise(contract.decimals(), 30000);\r\n    const amountWei = ethers.parseUnits(amount.toString(), decimals);\r\n    \r\n    console.log(`Checking current allowance...`);\r\n    // Check current allowance\r\n    const currentAllowance = await timeoutPromise(\r\n      contract.allowance(signer.address, spenderAddress), \r\n      30000\r\n    );\r\n    \r\n    console.log(`Current allowance: ${currentAllowance.toString()}, Required: ${amountWei.toString()}`);\r\n    \r\n    if (currentAllowance < amountWei) {\r\n      console.log(`Need approval, sending approve transaction...`);\r\n      // Approve max amount to avoid future approvals\r\n      const maxAmount = ethers.MaxUint256;\r\n      \r\n      // Add gas estimation and nonce management\r\n      const gasEstimate = await timeoutPromise(\r\n        contract.approve.estimateGas(spenderAddress, maxAmount),\r\n        30000\r\n      );\r\n      const gasLimit = Math.floor(Number(gasEstimate) * 1.2);\r\n      \r\n      const provider = signer.provider;\r\n      if (!provider) throw new Error('Provider not available');\r\n      const nonce = await provider.getTransactionCount(signer.address, 'pending');\r\n      \r\n      console.log(`Sending approve transaction with nonce ${nonce}...`);\r\n      const tx = await contract.approve(spenderAddress, maxAmount, { gasLimit, nonce });\r\n      \r\n      console.log(`Approve transaction sent: ${tx.hash}, waiting for confirmation...`);\r\n      const receipt = await timeoutPromise(tx.wait(), 300000); // 5 minute timeout\r\n      console.log(`Approve transaction confirmed in block ${receipt?.blockNumber}`);\r\n      \r\n      return tx;\r\n    } else {\r\n      console.log(`Token already approved`);\r\n    }\r\n    \r\n    return null; // Already approved\r\n  } catch (error) {\r\n    console.error('Token approval failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Perform PHRS transfer with timeout and better error handling\r\nexport async function performTransfer(\r\n  recipientAddress: string,\r\n  amount: number,\r\n  signer: ethers.Wallet\r\n): Promise<{ hash: string; blockNumber: number | null }> {\r\n  try {\r\n    console.log(`Starting PHRS transfer to ${recipientAddress} amount: ${amount}`);\r\n    \r\n    const amountWei = ethers.parseEther(amount.toString());\r\n    \r\n    // Timeout wrapper\r\n    const timeoutPromise = (promise: Promise<any>, timeoutMs: number) => {\r\n      return Promise.race([\r\n        promise,\r\n        new Promise((_, reject) => \r\n          setTimeout(() => reject(new Error(`Operation timed out after ${timeoutMs}ms`)), timeoutMs)\r\n        )\r\n      ]);\r\n    };\r\n    \r\n    // Get current nonce to avoid replay attacks\r\n    const provider = signer.provider;\r\n    if (!provider) throw new Error('Provider not available');\r\n    \r\n    console.log(`Getting nonce for ${signer.address}...`);\r\n    const nonce = await timeoutPromise(\r\n      provider.getTransactionCount(signer.address, 'pending'), \r\n      30000\r\n    );\r\n    console.log(`Current nonce: ${nonce}`);\r\n    \r\n    // Get current gas price\r\n    console.log(`Getting gas price...`);\r\n    const feeData = await timeoutPromise(provider.getFeeData(), 30000);\r\n    console.log(`Fee data:`, feeData);\r\n    \r\n    const txParams = {\r\n      to: recipientAddress,\r\n      value: amountWei,\r\n      gasLimit: 21000,\r\n      nonce: nonce,\r\n      maxFeePerGas: feeData.maxFeePerGas || ethers.parseUnits('2', 'gwei'),\r\n      maxPriorityFeePerGas: feeData.maxPriorityFeePerGas || ethers.parseUnits('1', 'gwei')\r\n    };\r\n    \r\n    console.log(`Sending transaction with params:`, txParams);\r\n    const tx = await timeoutPromise(signer.sendTransaction(txParams), 60000);\r\n    console.log(`Transaction sent: ${tx.hash}, waiting for confirmation...`);\r\n    console.log(`Explorer link: https://testnet.pharosscan.xyz/tx/${tx.hash}`);\r\n    \r\n    // Fast confirmation with reasonable timeout\r\n    try {\r\n      const receipt = await timeoutPromise(tx.wait(), 120000); // 2 minute timeout\r\n      console.log(`‚úÖ Transaction confirmed in block ${receipt?.blockNumber}`);\r\n      \r\n      return {\r\n        hash: tx.hash,\r\n        blockNumber: receipt?.blockNumber || null\r\n      };\r\n    } catch (confirmError) {\r\n      console.log(`‚è∞ Transaction confirmation timed out after 2 minutes`);\r\n      console.log(`üìã Transaction hash: ${tx.hash}`);\r\n      console.log(`üîç Check manually: https://testnet.pharosscan.xyz/tx/${tx.hash}`);\r\n      \r\n      // Return hash - transaction was sent successfully\r\n      return {\r\n        hash: tx.hash,\r\n        blockNumber: null\r\n      };\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Advanced transfer failed, trying simple method:', error);\r\n    \r\n    // Fallback to simple transfer method\r\n    try {\r\n      console.log('Attempting simple transfer...');\r\n      const simpleParams = {\r\n        to: recipientAddress,\r\n        value: ethers.parseEther(amount.toString()),\r\n        gasLimit: 21000\r\n      };\r\n      \r\n      const simpleTx = await signer.sendTransaction(simpleParams);\r\n      console.log(`Simple transaction sent: ${simpleTx.hash}`);\r\n      \r\n      // Simple confirmation with timeout like Python version\r\n      try {\r\n        const simpleReceipt = await simpleTx.wait();\r\n        console.log(`Simple transaction confirmed in block ${simpleReceipt?.blockNumber}`);\r\n        \r\n        return {\r\n          hash: simpleTx.hash,\r\n          blockNumber: simpleReceipt?.blockNumber || null\r\n        };\r\n      } catch (confirmError) {\r\n        console.log('Simple transaction sent but confirmation timed out');\r\n        return {\r\n          hash: simpleTx.hash,\r\n          blockNumber: null\r\n        };\r\n      }\r\n    } catch (fallbackError) {\r\n      console.error('Both transfer methods failed:', fallbackError);\r\n      throw fallbackError;\r\n    }\r\n  }\r\n}\r\n\r\n// Perform token swap\r\nexport async function performSwap(\r\n  fromToken: string,\r\n  toToken: string,\r\n  amount: number,\r\n  signer: ethers.Wallet\r\n): Promise<{ hash: string; blockNumber: number | null }> {\r\n  try {\r\n    // First approve the token\r\n    await approveToken(fromToken, CONTRACTS.SWAP_ROUTER, amount, signer);\r\n    \r\n    // Small delay after approval to prevent nonce conflicts\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    const contract = new ethers.Contract(fromToken, ERC20_ABI, signer);\r\n    const decimals = await contract.decimals();\r\n    const amountWei = ethers.parseUnits(amount.toString(), decimals);\r\n    \r\n    // Encode swap data (simplified - you may need to adjust based on actual router interface)\r\n    const swapData = ethers.concat([\r\n      \"0x04e45aaf\", // exactInputSingle function selector\r\n      ethers.AbiCoder.defaultAbiCoder().encode(\r\n        [\"address\", \"address\", \"uint24\", \"address\", \"uint256\", \"uint256\", \"uint256\"],\r\n        [fromToken, toToken, 500, signer.address, amountWei, 0, 0]\r\n      )\r\n    ]);\r\n    \r\n    const swapRouter = new ethers.Contract(CONTRACTS.SWAP_ROUTER, SWAP_ROUTER_ABI, signer);\r\n    const deadline = Math.floor(Date.now() / 1000) + 300; // 5 minutes\r\n    \r\n    // Add nonce management\r\n    const provider = signer.provider;\r\n    if (!provider) throw new Error('Provider not available');\r\n    const nonce = await provider.getTransactionCount(signer.address, 'pending');\r\n    \r\n    const tx = await swapRouter.multicall(deadline, [swapData], { nonce });\r\n    const receipt = await tx.wait();\r\n    \r\n    return {\r\n      hash: tx.hash,\r\n      blockNumber: receipt?.blockNumber || null\r\n    };\r\n  } catch (error) {\r\n    console.error('Swap failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Add liquidity\r\nexport async function addLiquidity(\r\n  token0: string,\r\n  token1: string,\r\n  amount0: number,\r\n  amount1: number,\r\n  signer: ethers.Wallet\r\n): Promise<{ hash: string; blockNumber: number | null }> {\r\n  try {\r\n    // Ensure correct token order (token0 should be lower address)\r\n    let sortedToken0 = token0;\r\n    let sortedToken1 = token1;\r\n    let sortedAmount0 = amount0;\r\n    let sortedAmount1 = amount1;\r\n    \r\n    if (token0.toLowerCase() > token1.toLowerCase()) {\r\n      sortedToken0 = token1;\r\n      sortedToken1 = token0;\r\n      sortedAmount0 = amount1;\r\n      sortedAmount1 = amount0;\r\n    }\r\n    \r\n    // Approve both tokens with delay to prevent nonce conflicts\r\n    console.log(`Approving first token: ${sortedToken0}`);\r\n    await approveToken(sortedToken0, CONTRACTS.POSITION_MANAGER, sortedAmount0, signer);\r\n    \r\n    // Small delay between approvals\r\n    console.log(`Waiting before second approval...`);\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    console.log(`Approving second token: ${sortedToken1}`);\r\n    await approveToken(sortedToken1, CONTRACTS.POSITION_MANAGER, sortedAmount1, signer);\r\n    \r\n    // Get token decimals\r\n    const contract0 = new ethers.Contract(sortedToken0, ERC20_ABI, signer);\r\n    const contract1 = new ethers.Contract(sortedToken1, ERC20_ABI, signer);\r\n    \r\n    const [decimals0, decimals1] = await Promise.all([\r\n      contract0.decimals(),\r\n      contract1.decimals()\r\n    ]);\r\n    \r\n    const amount0Wei = ethers.parseUnits(sortedAmount0.toString(), decimals0);\r\n    const amount1Wei = ethers.parseUnits(sortedAmount1.toString(), decimals1);\r\n    \r\n    const mintParams = {\r\n      token0: sortedToken0,\r\n      token1: sortedToken1,\r\n      fee: 500,\r\n      tickLower: -887270,\r\n      tickUpper: 887270,\r\n      amount0Desired: amount0Wei,\r\n      amount1Desired: amount1Wei,\r\n      amount0Min: 0,\r\n      amount1Min: 0,\r\n      recipient: signer.address,\r\n      deadline: Math.floor(Date.now() / 1000) + 600\r\n    };\r\n    \r\n    const positionManager = new ethers.Contract(\r\n      CONTRACTS.POSITION_MANAGER, \r\n      POSITION_MANAGER_ABI, \r\n      signer\r\n    );\r\n    \r\n    // Add gas estimation and nonce management for better transaction success\r\n    const gasEstimate = await positionManager.mint.estimateGas(mintParams);\r\n    const gasLimit = Math.floor(Number(gasEstimate) * 1.2); // Add 20% buffer\r\n    \r\n    const provider = signer.provider;\r\n    if (!provider) throw new Error('Provider not available');\r\n    const nonce = await provider.getTransactionCount(signer.address, 'pending');\r\n    \r\n    const tx = await positionManager.mint(mintParams, { gasLimit, nonce });\r\n    const receipt = await tx.wait();\r\n    \r\n    return {\r\n      hash: tx.hash,\r\n      blockNumber: receipt?.blockNumber || null\r\n    };\r\n  } catch (error) {\r\n    console.error('Add liquidity failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Generate swap pairs\r\nexport function getSwapPairs(): Array<{\r\n  fromToken: string;\r\n  toToken: string;\r\n  amount: number;\r\n  fromTicker: string;\r\n  toTicker: string;\r\n}> {\r\n  return [\r\n    {\r\n      fromToken: CONTRACTS.WPHRS,\r\n      toToken: CONTRACTS.USDC,\r\n      amount: FIXED_AMOUNTS.WPHRS,\r\n      fromTicker: \"WPHRS\",\r\n      toTicker: \"USDC\"\r\n    },\r\n    {\r\n      fromToken: CONTRACTS.WPHRS,\r\n      toToken: CONTRACTS.USDT,\r\n      amount: FIXED_AMOUNTS.WPHRS,\r\n      fromTicker: \"WPHRS\",\r\n      toTicker: \"USDT\"\r\n    },\r\n    {\r\n      fromToken: CONTRACTS.USDC,\r\n      toToken: CONTRACTS.WPHRS,\r\n      amount: FIXED_AMOUNTS.USDC,\r\n      fromTicker: \"USDC\",\r\n      toTicker: \"WPHRS\"\r\n    },\r\n    {\r\n      fromToken: CONTRACTS.USDT,\r\n      toToken: CONTRACTS.WPHRS,\r\n      amount: FIXED_AMOUNTS.USDT,\r\n      fromTicker: \"USDT\",\r\n      toTicker: \"WPHRS\"\r\n    },\r\n    {\r\n      fromToken: CONTRACTS.USDC,\r\n      toToken: CONTRACTS.USDT,\r\n      amount: FIXED_AMOUNTS.USDC,\r\n      fromTicker: \"USDC\",\r\n      toTicker: \"USDT\"\r\n    },\r\n    {\r\n      fromToken: CONTRACTS.USDT,\r\n      toToken: CONTRACTS.USDC,\r\n      amount: FIXED_AMOUNTS.USDT,\r\n      fromTicker: \"USDT\",\r\n      toTicker: \"USDC\"\r\n    }\r\n  ];\r\n}\r\n\r\n// Generate liquidity pairs\r\nexport function getLiquidityPairs(): Array<{\r\n  token0: string;\r\n  token1: string;\r\n  amount0: number;\r\n  amount1: number;\r\n  ticker0: string;\r\n  ticker1: string;\r\n}> {\r\n  return [\r\n    {\r\n      token0: CONTRACTS.USDC,\r\n      token1: CONTRACTS.WPHRS,\r\n      amount0: FIXED_AMOUNTS.USDC,\r\n      amount1: FIXED_AMOUNTS.WPHRS,\r\n      ticker0: \"USDC\",\r\n      ticker1: \"WPHRS\"\r\n    },\r\n    {\r\n      token0: CONTRACTS.USDC,\r\n      token1: CONTRACTS.USDT,\r\n      amount0: FIXED_AMOUNTS.USDC,\r\n      amount1: FIXED_AMOUNTS.USDT,\r\n      ticker0: \"USDC\",\r\n      ticker1: \"USDT\"\r\n    },\r\n    {\r\n      token0: CONTRACTS.WPHRS,\r\n      token1: CONTRACTS.USDT,\r\n      amount0: FIXED_AMOUNTS.WPHRS,\r\n      amount1: FIXED_AMOUNTS.USDT,\r\n      ticker0: \"WPHRS\",\r\n      ticker1: \"USDT\"\r\n    }\r\n  ];\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/LENOVO/Desktop/Pbypass/hiddencooker/src/app/automation/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { ethers } from 'ethers';\r\nimport './automation.css';\r\nimport {\r\n  getProviderAndSigner,\r\n  generateRandomAddress,\r\n  performTransfer,\r\n  addLiquidity,\r\n  performSwap,\r\n  getLiquidityPairs,\r\n  getSwapPairs,\r\n  getTokenBalance,\r\n  CONTRACTS,\r\n  FIXED_AMOUNTS\r\n} from './blockchain';\r\nimport { checkAuthSession, clearAuthSession } from '../utils/auth';\r\n\r\n// Types\r\ninterface WalletInfo {\r\n  address: string;\r\n  privateKey: string;\r\n}\r\n\r\ninterface TransactionCounts {\r\n  transfers: number;\r\n  liquidity: number;\r\n  swaps: number;\r\n}\r\n\r\ninterface ProxySettings {\r\n  type: 'free' | 'custom' | 'none';\r\n  rotate: boolean;\r\n}\r\n\r\ninterface TokenBalance {\r\n  phrs: number;\r\n  wphrs: number;\r\n  usdc: number;\r\n  usdt: number;\r\n}\r\n\r\ninterface CostCalculation {\r\n  phrs: number;\r\n  wphrs: number;\r\n  usdc: number;\r\n  usdt: number;\r\n}\r\n\r\nconst RPC_URL = \"https://testnet.dplabs-internal.com\";\r\n\r\nconst ERC20_ABI = [\r\n  \"function balanceOf(address) view returns (uint256)\",\r\n  \"function decimals() view returns (uint8)\",\r\n  \"function allowance(address,address) view returns (uint256)\",\r\n  \"function approve(address,uint256) returns (bool)\"\r\n];\r\n\r\nexport default function AutomationPage() {\r\n  const router = useRouter();\r\n  \r\n  // Authentication state\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isCheckingAuth, setIsCheckingAuth] = useState(true);\r\n  \r\n  // Step management\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [wallet, setWallet] = useState<WalletInfo | null>(null);\r\n  const [transactionCounts, setTransactionCounts] = useState<TransactionCounts>({\r\n    transfers: 0,\r\n    liquidity: 0,\r\n    swaps: 0\r\n  });\r\n  const [proxySettings, setProxySettings] = useState<ProxySettings>({\r\n    type: 'none',\r\n    rotate: false\r\n  });\r\n  const [balances, setBalances] = useState<TokenBalance | null>(null);\r\n  const [costs, setCosts] = useState<CostCalculation | null>(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [logs, setLogs] = useState<string[]>([]);\r\n  \r\n  // Form states\r\n  const [privateKeyInput, setPrivateKeyInput] = useState('');\r\n  const [transferCount, setTransferCount] = useState('');\r\n  const [liquidityCount, setLiquidityCount] = useState('');\r\n  const [swapCount, setSwapCount] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [showPrivacy, setShowPrivacy] = useState(false);\r\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\r\n\r\n  // Session ID for concurrent users\r\n  const [sessionId] = useState(() => Math.random().toString(36).substring(7));\r\n\r\n  // Add log entry\r\n  const addLog = (message: string) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    setLogs(prev => {\r\n      const newLogs = [...prev, `[${timestamp}] ${message}`];\r\n      // Auto-scroll to bottom\r\n      setTimeout(() => {\r\n        const logsContainer = document.querySelector('.logs');\r\n        if (logsContainer) {\r\n          logsContainer.scrollTop = logsContainer.scrollHeight;\r\n        }\r\n      }, 100);\r\n      return newLogs;\r\n    });\r\n  };\r\n\r\n  // Render log entry with clickable links\r\n  const renderLogEntry = (log: string, index: number) => {\r\n    // Check if log contains explorer URL\r\n    const explorerMatch = log.match(/(https:\\/\\/testnet\\.pharosscan\\.xyz\\/tx\\/0x[a-fA-F0-9]+)/);\r\n    \r\n    if (explorerMatch) {\r\n      const url = explorerMatch[1];\r\n      const beforeUrl = log.substring(0, log.indexOf(url));\r\n      const afterUrl = log.substring(log.indexOf(url) + url.length);\r\n      \r\n      return (\r\n        <div key={index} className=\"log-entry\">\r\n          {beforeUrl}\r\n          <a \r\n            href={url} \r\n            target=\"_blank\" \r\n            rel=\"noopener noreferrer\"\r\n            className=\"log-link\"\r\n          >\r\n            {url}\r\n          </a>\r\n          {afterUrl}\r\n        </div>\r\n      );\r\n    }\r\n    \r\n    return (\r\n      <div key={index} className=\"log-entry\">\r\n        {log}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Generate wallet from private key\r\n  const generateWallet = (privateKey: string): WalletInfo | null => {\r\n    try {\r\n      const wallet = new ethers.Wallet(privateKey);\r\n      return {\r\n        address: wallet.address,\r\n        privateKey: privateKey\r\n      };\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Get token balance helper\r\n  const getTokenBalanceHelper = async (tokenAddress: string, walletAddress: string): Promise<number> => {\r\n    const provider = new ethers.JsonRpcProvider(RPC_URL);\r\n    return await getTokenBalance(tokenAddress, walletAddress, provider);\r\n  };\r\n\r\n  // Calculate costs\r\n  const calculateCosts = (counts: TransactionCounts): CostCalculation => {\r\n    // Transfer costs\r\n    const phrsFromTransfers = counts.transfers * FIXED_AMOUNTS.PHRS;\r\n    \r\n    // Liquidity costs (assume even distribution across 3 pairs)\r\n    const lpPerPair = Math.floor(counts.liquidity / 3);\r\n    const lpRemainder = counts.liquidity % 3;\r\n    \r\n    const usdcFromLp = (lpPerPair * 2 + Math.min(lpRemainder, 2)) * FIXED_AMOUNTS.USDC;\r\n    const usdtFromLp = (lpPerPair * 2 + Math.max(0, Math.min(lpRemainder - 1, 2))) * FIXED_AMOUNTS.USDT;\r\n    const wphrsFromLp = (lpPerPair * 2 + Math.max(0, lpRemainder - 2) + Math.min(lpRemainder, 1)) * FIXED_AMOUNTS.WPHRS;\r\n    \r\n    // Swap costs (assume even distribution across 6 swap types)\r\n    const swapPerType = Math.floor(counts.swaps / 6);\r\n    const swapRemainder = counts.swaps % 6;\r\n    \r\n    let usdcFromSwap = swapPerType * 2 * FIXED_AMOUNTS.USDC;\r\n    let usdtFromSwap = swapPerType * 2 * FIXED_AMOUNTS.USDT;\r\n    let wphrsFromSwap = swapPerType * 2 * FIXED_AMOUNTS.WPHRS;\r\n    \r\n    // Add remainder swaps\r\n    if (swapRemainder > 0) {\r\n      usdcFromSwap += Math.min(swapRemainder, 2) * FIXED_AMOUNTS.USDC;\r\n    }\r\n    if (swapRemainder > 2) {\r\n      usdtFromSwap += Math.min(swapRemainder - 2, 2) * FIXED_AMOUNTS.USDT;\r\n    }\r\n    if (swapRemainder > 4) {\r\n      wphrsFromSwap += (swapRemainder - 4) * FIXED_AMOUNTS.WPHRS;\r\n    }\r\n\r\n    // Gas buffer\r\n    const gasBuffer = (counts.transfers + counts.liquidity + counts.swaps) * 0.001;\r\n\r\n    return {\r\n      phrs: phrsFromTransfers + gasBuffer,\r\n      wphrs: wphrsFromLp + wphrsFromSwap,\r\n      usdc: usdcFromLp + usdcFromSwap,\r\n      usdt: usdtFromLp + usdtFromSwap\r\n    };\r\n  };\r\n\r\n  // Check balances\r\n  const checkBalances = async (walletAddress: string) => {\r\n    try {\r\n      const [phrsBalance, wphrsBalance, usdcBalance, usdtBalance] = await Promise.all([\r\n        getTokenBalanceHelper(\"PHRS\", walletAddress),\r\n        getTokenBalanceHelper(CONTRACTS.WPHRS, walletAddress),\r\n        getTokenBalanceHelper(CONTRACTS.USDC, walletAddress),\r\n        getTokenBalanceHelper(CONTRACTS.USDT, walletAddress)\r\n      ]);\r\n\r\n      return {\r\n        phrs: phrsBalance,\r\n        wphrs: wphrsBalance,\r\n        usdc: usdcBalance,\r\n        usdt: usdtBalance\r\n      };\r\n    } catch (error) {\r\n      console.error('Balance check failed:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Step handlers\r\n  const handlePrivateKeySubmit = () => {\r\n    if (!privateKeyInput.trim()) {\r\n      setError('Please enter your private key');\r\n      return;\r\n    }\r\n\r\n    const walletInfo = generateWallet(privateKeyInput.trim());\r\n    if (!walletInfo) {\r\n      setError('Invalid private key');\r\n      return;\r\n    }\r\n\r\n    setWallet(walletInfo);\r\n    setError('');\r\n    setCurrentStep(1);\r\n  };\r\n\r\n  const handleTransferCountSubmit = () => {\r\n    const count = parseInt(transferCount);\r\n    if (isNaN(count) || count < 0) {\r\n      setError('Please enter a valid number (0 or positive)');\r\n      return;\r\n    }\r\n\r\n    setTransactionCounts(prev => ({ ...prev, transfers: count }));\r\n    setError('');\r\n    setCurrentStep(2);\r\n  };\r\n\r\n  const handleLiquidityCountSubmit = () => {\r\n    const count = parseInt(liquidityCount);\r\n    if (isNaN(count) || count < 0) {\r\n      setError('Please enter a valid number (0 or positive)');\r\n      return;\r\n    }\r\n\r\n    setTransactionCounts(prev => ({ ...prev, liquidity: count }));\r\n    setError('');\r\n    setCurrentStep(3);\r\n  };\r\n\r\n  const handleSwapCountSubmit = () => {\r\n    const count = parseInt(swapCount);\r\n    if (isNaN(count) || count < 0) {\r\n      setError('Please enter a valid number (0 or positive)');\r\n      return;\r\n    }\r\n\r\n    setTransactionCounts(prev => ({ ...prev, swaps: count }));\r\n    setError('');\r\n    setCurrentStep(4);\r\n  };\r\n\r\n  const handleProxySelection = (type: 'free' | 'custom' | 'none') => {\r\n    if (type === 'none') {\r\n      setProxySettings({ type, rotate: false });\r\n      setCurrentStep(5);\r\n    } else {\r\n      setProxySettings(prev => ({ ...prev, type }));\r\n      setCurrentStep(4.5); // Intermediate step for rotation question\r\n    }\r\n  };\r\n\r\n  const handleRotateSelection = (rotate: boolean) => {\r\n    setProxySettings(prev => ({ ...prev, rotate }));\r\n    setCurrentStep(5);\r\n  };\r\n\r\n  const handleCostCalculation = async () => {\r\n    if (!wallet) return;\r\n\r\n    const calculatedCosts = calculateCosts(transactionCounts);\r\n    setCosts(calculatedCosts);\r\n\r\n    const walletBalances = await checkBalances(wallet.address);\r\n    setBalances(walletBalances);\r\n\r\n    setCurrentStep(6);\r\n  };\r\n\r\n  const checkSufficientBalance = (): boolean => {\r\n    if (!balances || !costs) return false;\r\n\r\n    return (\r\n      balances.phrs >= costs.phrs &&\r\n      balances.wphrs >= costs.wphrs &&\r\n      balances.usdc >= costs.usdc &&\r\n      balances.usdt >= costs.usdt\r\n    );\r\n  };\r\n\r\n  const startAutomation = async () => {\r\n    if (!wallet) return;\r\n    \r\n    setIsProcessing(true);\r\n    setCurrentStep(7);\r\n    addLog(\"üöÄ Starting automation process...\");\r\n    addLog(`üìß Session ID: ${sessionId}`);\r\n    addLog(`üëõ Wallet: ${wallet.address}`);\r\n    \r\n    // Add timeout for entire automation process\r\n    const automationTimeout = setTimeout(() => {\r\n      addLog(\"‚è∞ Automation timed out after 30 minutes\");\r\n      setIsProcessing(false);\r\n    }, 30 * 60 * 1000); // 30 minutes\r\n    \r\n    try {\r\n      const { provider, signer } = getProviderAndSigner(wallet.privateKey);\r\n      \r\n      // Test network connectivity first\r\n      addLog(\"üîç Testing network connectivity...\");\r\n      try {\r\n        const blockNumber = await provider.getBlockNumber();\r\n        addLog(`‚úÖ Connected to network (block ${blockNumber})`);\r\n        \r\n        const balance = await provider.getBalance(wallet.address);\r\n        const balanceEth = parseFloat(ethers.formatEther(balance));\r\n        addLog(`üí∞ Current balance: ${balanceEth.toFixed(6)} PHRS`);\r\n        \r\n        if (balanceEth < 0.001) {\r\n          addLog(\"‚ö†Ô∏è Warning: Very low balance, transactions may fail\");\r\n        }\r\n      } catch (networkError) {\r\n        addLog(`‚ùå Network connectivity failed: ${networkError}`);\r\n        throw new Error(\"Network connectivity issue\");\r\n      }\r\n      \r\n      // Execute transfers\r\n      if (transactionCounts.transfers > 0) {\r\n        addLog(\"=== FRIEND TRANSFERS ===\");\r\n        for (let i = 0; i < transactionCounts.transfers; i++) {\r\n          addLog(`Transfer ${i + 1}/${transactionCounts.transfers}`);\r\n          \r\n          const receiver = generateRandomAddress();\r\n          addLog(`     To: ${receiver.slice(0, 6)}...${receiver.slice(-6)}`);\r\n          addLog(`     Amount: ${FIXED_AMOUNTS.PHRS} PHRS`);\r\n          addLog(`     üîÑ Preparing transaction...`);\r\n          \r\n          try {\r\n            // Add progress indicator for long operations\r\n            const progressInterval = setInterval(() => {\r\n              addLog(`     ‚è≥ Transaction in progress...`);\r\n            }, 30000); // Update every 30 seconds\r\n            \r\n            const result = await performTransfer(receiver, FIXED_AMOUNTS.PHRS, signer);\r\n            clearInterval(progressInterval);\r\n            \r\n            addLog(`     üîó Explorer: https://testnet.pharosscan.xyz/tx/${result.hash}`);\r\n            \r\n            if (result.blockNumber) {\r\n              addLog(`     ‚úÖ Transfer confirmed in block ${result.blockNumber}`);\r\n            } else {\r\n              addLog(`     ‚úÖ Transfer sent (confirmation pending)`);\r\n            }\r\n            addLog(`     üìã Hash: ${result.hash}`);\r\n          } catch (error: any) {\r\n            addLog(`     ‚ùå Transfer failed: ${error.message || error}`);\r\n            console.error('Transfer error:', error);\r\n            \r\n            // Continue with next transfer even if one fails\r\n            addLog(`     ‚è≠Ô∏è Continuing to next transfer...`);\r\n          }\r\n          \r\n          // Wait between transactions to prevent nonce conflicts\r\n          if (i < transactionCounts.transfers - 1) {\r\n            addLog(`     ‚è≥ Waiting 5 seconds before next transfer...`);\r\n            await new Promise(resolve => setTimeout(resolve, 5000));\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Execute liquidity additions\r\n      if (transactionCounts.liquidity > 0) {\r\n        addLog(\"=== ADD LIQUIDITY ===\");\r\n        const liquidityPairs = getLiquidityPairs();\r\n        \r\n        for (let i = 0; i < transactionCounts.liquidity; i++) {\r\n          addLog(`Liquidity ${i + 1}/${transactionCounts.liquidity}`);\r\n          \r\n          const pair = liquidityPairs[i % liquidityPairs.length];\r\n          addLog(`     Pair: ${pair.ticker0}/${pair.ticker1}`);\r\n          addLog(`     Amount: ${pair.amount0} ${pair.ticker0} + ${pair.amount1} ${pair.ticker1}`);\r\n          \r\n          try {\r\n            addLog(`     üîÑ Starting liquidity addition...`);\r\n            addLog(`     üìù Approving ${pair.ticker0} token...`);\r\n            \r\n            const result = await addLiquidity(\r\n              pair.token0, \r\n              pair.token1, \r\n              pair.amount0, \r\n              pair.amount1, \r\n              signer\r\n            );\r\n            addLog(`     ‚úÖ Liquidity added successfully`);\r\n            addLog(`     Hash: ${result.hash}`);\r\n            addLog(`     Block: ${result.blockNumber}`);\r\n            addLog(`     Explorer: https://testnet.pharosscan.xyz/tx/${result.hash}`);\r\n          } catch (error: any) {\r\n            addLog(`     ‚ùå Add liquidity failed: ${error.message || error}`);\r\n            console.error('Detailed error:', error);\r\n          }\r\n          \r\n          await new Promise(resolve => setTimeout(resolve, 5000));\r\n        }\r\n      }\r\n      \r\n      // Execute swaps\r\n      if (transactionCounts.swaps > 0) {\r\n        addLog(\"=== SWAPS ===\");\r\n        const swapPairs = getSwapPairs();\r\n        \r\n        for (let i = 0; i < transactionCounts.swaps; i++) {\r\n          addLog(`Swap ${i + 1}/${transactionCounts.swaps}`);\r\n          \r\n          const pair = swapPairs[i % swapPairs.length];\r\n          addLog(`     Swap: ${pair.fromTicker} ‚Üí ${pair.toTicker}`);\r\n          addLog(`     Amount: ${pair.amount} ${pair.fromTicker}`);\r\n          \r\n          try {\r\n            const result = await performSwap(\r\n              pair.fromToken, \r\n              pair.toToken, \r\n              pair.amount, \r\n              signer\r\n            );\r\n            addLog(`     ‚úÖ Swap successful`);\r\n            addLog(`     Hash: ${result.hash}`);\r\n            addLog(`     Block: ${result.blockNumber}`);\r\n            addLog(`     Explorer: https://testnet.pharosscan.xyz/tx/${result.hash}`);\r\n          } catch (error: any) {\r\n            addLog(`     ‚ùå Swap failed: ${error.message || error}`);\r\n            console.error('Swap error:', error);\r\n          }\r\n          \r\n          await new Promise(resolve => setTimeout(resolve, 5000));\r\n        }\r\n      }\r\n      \r\n      addLog(\"üéâ All operations completed successfully!\");\r\n      clearTimeout(automationTimeout);\r\n      setIsProcessing(false);\r\n      \r\n    } catch (error: any) {\r\n      addLog(`‚ùå Automation failed: ${error.message || error}`);\r\n      console.error('Automation error:', error);\r\n      clearTimeout(automationTimeout);\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Auto-calculate costs when reaching step 5\r\n  useEffect(() => {\r\n    if (currentStep === 5) {\r\n      handleCostCalculation();\r\n    }\r\n  }, [currentStep]);\r\n\r\n  const renderStep = () => {\r\n    switch (currentStep) {\r\n      case 0:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>Enter your wallet private key</h2>\r\n            <input\r\n              type=\"password\"\r\n              className=\"input\"\r\n              placeholder=\"Private Key\"\r\n              value={privateKeyInput}\r\n              onChange={(e) => {\r\n                setPrivateKeyInput(e.target.value);\r\n                setError('');\r\n              }}\r\n            />\r\n            {error && <div className=\"error\">{error}</div>}\r\n            <button onClick={handlePrivateKeySubmit} className=\"button\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      case 1:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>How many friend transfers?</h2>\r\n            <input\r\n              type=\"number\"\r\n              className=\"input\"\r\n              placeholder=\"Number of transfers\"\r\n              value={transferCount}\r\n              onChange={(e) => {\r\n                setTransferCount(e.target.value);\r\n                setError('');\r\n              }}\r\n              min=\"0\"\r\n            />\r\n            {error && <div className=\"error\">{error}</div>}\r\n            <button onClick={handleTransferCountSubmit} className=\"button\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      case 2:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>How many add liquidity transactions?</h2>\r\n            <input\r\n              type=\"number\"\r\n              className=\"input\"\r\n              placeholder=\"Number of liquidity transactions\"\r\n              value={liquidityCount}\r\n              onChange={(e) => {\r\n                setLiquidityCount(e.target.value);\r\n                setError('');\r\n              }}\r\n              min=\"0\"\r\n            />\r\n            {error && <div className=\"error\">{error}</div>}\r\n            <button onClick={handleLiquidityCountSubmit} className=\"button\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      case 3:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>How many swap transactions?</h2>\r\n            <input\r\n              type=\"number\"\r\n              className=\"input\"\r\n              placeholder=\"Number of swap transactions\"\r\n              value={swapCount}\r\n              onChange={(e) => {\r\n                setSwapCount(e.target.value);\r\n                setError('');\r\n              }}\r\n              min=\"0\"\r\n            />\r\n            {error && <div className=\"error\">{error}</div>}\r\n            <button onClick={handleSwapCountSubmit} className=\"button\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      case 4:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>Proxy Settings</h2>\r\n            <div className=\"button-group\">\r\n              <button\r\n                onClick={() => handleProxySelection('free')}\r\n                className=\"button secondary\"\r\n              >\r\n                Use Free Proxyscrape proxy\r\n              </button>\r\n              <button\r\n                onClick={() => handleProxySelection('custom')}\r\n                className=\"button secondary\"\r\n              >\r\n                Use custom proxy\r\n              </button>\r\n              <button\r\n                onClick={() => handleProxySelection('none')}\r\n                className=\"button secondary\"\r\n              >\r\n                No proxy\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 4.5:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>Rotate invalid proxy?</h2>\r\n            <div className=\"button-group\">\r\n              <button\r\n                onClick={() => handleRotateSelection(true)}\r\n                className=\"button secondary\"\r\n              >\r\n                YES\r\n              </button>\r\n              <button\r\n                onClick={() => handleRotateSelection(false)}\r\n                className=\"button secondary\"\r\n              >\r\n                NO\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 6:\r\n        const hasSufficientBalance = checkSufficientBalance();\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>Cost Calculation</h2>\r\n            <div className=\"cost-breakdown\">\r\n              <h3>Transaction Summary:</h3>\r\n              <ul>\r\n                <li>Friend Transfers: {transactionCounts.transfers}</li>\r\n                <li>Add Liquidity: {transactionCounts.liquidity}</li>\r\n                <li>Swaps: {transactionCounts.swaps}</li>\r\n              </ul>\r\n              \r\n              <h3>Required Tokens:</h3>\r\n              <div className=\"balance-comparison\">\r\n                <div className={`balance-item ${balances && costs && balances.phrs >= costs.phrs ? 'sufficient' : 'insufficient'}`}>\r\n                  <span>PHRS: {costs?.phrs.toFixed(4)} (Balance: {balances?.phrs.toFixed(4)})</span>\r\n                </div>\r\n                <div className={`balance-item ${balances && costs && balances.wphrs >= costs.wphrs ? 'sufficient' : 'insufficient'}`}>\r\n                  <span>WPHRS: {costs?.wphrs.toFixed(4)} (Balance: {balances?.wphrs.toFixed(4)})</span>\r\n                </div>\r\n                <div className={`balance-item ${balances && costs && balances.usdc >= costs.usdc ? 'sufficient' : 'insufficient'}`}>\r\n                  <span>USDC: {costs?.usdc.toFixed(4)} (Balance: {balances?.usdc.toFixed(4)})</span>\r\n                </div>\r\n                <div className={`balance-item ${balances && costs && balances.usdt >= costs.usdt ? 'sufficient' : 'insufficient'}`}>\r\n                  <span>USDT: {costs?.usdt.toFixed(4)} (Balance: {balances?.usdt.toFixed(4)})</span>\r\n                </div>\r\n              </div>\r\n              \r\n              {!hasSufficientBalance && (\r\n                <div className=\"warning\">\r\n                  ‚ö†Ô∏è Insufficient balance for one or more tokens. Please ensure you have enough tokens before proceeding.\r\n                </div>\r\n              )}\r\n              \r\n              {hasSufficientBalance && (\r\n                <div className=\"success-container\">\r\n                  <div className=\"success\">üéâ You are ready to go!</div>\r\n                  <div className=\"button-group\">\r\n                    <button onClick={startAutomation} className=\"button\">\r\n                      Let's Go\r\n                    </button>\r\n                    <button onClick={() => setCurrentStep(0)} className=\"button secondary\">\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 7:\r\n        return (\r\n          <div className=\"automation-container\">\r\n            <div className=\"warning-header\">\r\n              {isProcessing && <div className=\"loading-spinner\"></div>}\r\n              ‚ö†Ô∏è Don't close the browser until it's finished\r\n            </div>\r\n            <div className=\"logs-container\">\r\n              <h3>Live Logs:</h3>\r\n              <div className=\"logs\">\r\n                {logs.map((log, index) => renderLogEntry(log, index))}\r\n              </div>\r\n              {isProcessing && (\r\n                <div className=\"automation-controls\">\r\n                  <button \r\n                    onClick={() => {\r\n                      addLog(\"‚èπÔ∏è Automation stopped by user\");\r\n                      setIsProcessing(false);\r\n                    }}\r\n                    className=\"button secondary\"\r\n                    style={{ marginTop: '15px' }}\r\n                  >\r\n                    Stop Automation\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return <div>Unknown step</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"automation-page\">\r\n      {/* Header */}\r\n      <div className=\"header\">\r\n        <h1>Pharos Network Automation</h1>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"content\">\r\n        {renderStep()}\r\n      </div>\r\n\r\n      {/* Footer */}\r\n      <div className=\"footer\">\r\n        <div className=\"footer-links\">\r\n          <button\r\n            onClick={() => setShowPrivacy(true)}\r\n            className=\"footer-link\"\r\n          >\r\n            Privacy\r\n          </button>\r\n          <button\r\n            onClick={() => setShowHowItWorks(true)}\r\n            className=\"footer-link\"\r\n          >\r\n            How it works\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Privacy Modal */}\r\n      {showPrivacy && (\r\n        <div className=\"modal-overlay\" onClick={() => setShowPrivacy(false)}>\r\n          <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\r\n            <h2>Privacy Policy</h2>\r\n            <div className=\"modal-content\">\r\n              <p>\r\n                At Pharos Network Automation, we take your privacy and security seriously. \r\n                Here's what you need to know about how we handle your information:\r\n              </p>\r\n              <h3>Your Wallet Security</h3>\r\n              <p>\r\n                ‚Ä¢ We never store your private keys on our servers<br/>\r\n                ‚Ä¢ All operations are performed in your browser session only<br/>\r\n                ‚Ä¢ Your private key is used temporarily for transaction signing and then discarded<br/>\r\n                ‚Ä¢ We don't have any database or permanent storage system\r\n              </p>\r\n              <h3>Session-Based Processing</h3>\r\n              <p>\r\n                ‚Ä¢ Each user gets a unique session ID for concurrent usage<br/>\r\n                ‚Ä¢ Sessions are temporary and expire when you close the browser<br/>\r\n                ‚Ä¢ No personal data is collected or transmitted to external services\r\n              </p>\r\n              <h3>Transaction Privacy</h3>\r\n              <p>\r\n                ‚Ä¢ All transactions are performed directly on the blockchain<br/>\r\n                ‚Ä¢ We don't monitor or log your transaction activities<br/>\r\n                ‚Ä¢ Your wallet interactions remain completely private\r\n              </p>\r\n              <p className=\"emphasis\">\r\n                Your security is our top priority. This tool operates entirely client-side \r\n                to ensure maximum privacy and security for your assets.\r\n              </p>\r\n            </div>\r\n            <button onClick={() => setShowPrivacy(false)} className=\"button\">\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* How It Works Modal */}\r\n      {showHowItWorks && (\r\n        <div className=\"modal-overlay\" onClick={() => setShowHowItWorks(false)}>\r\n          <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\r\n            <h2>How It Works</h2>\r\n            <div className=\"modal-content\">\r\n              <h3>Step-by-Step Process</h3>\r\n              <ol>\r\n                <li><strong>Wallet Connection:</strong> Enter your private key to generate wallet address</li>\r\n                <li><strong>Transaction Configuration:</strong> Set how many transactions you want for each type</li>\r\n                <li><strong>Proxy Settings:</strong> Choose your preferred proxy configuration</li>\r\n                <li><strong>Balance Verification:</strong> System checks if you have sufficient tokens</li>\r\n                <li><strong>Automated Execution:</strong> Transactions are executed automatically</li>\r\n              </ol>\r\n              \r\n              <h3>Fixed Transaction Amounts</h3>\r\n              <p>To ensure consistency and prevent errors, we use fixed amounts for all transactions:</p>\r\n              <ul>\r\n                <li><strong>PHRS Transfers:</strong> 0.0005 PHRS per transaction</li>\r\n                <li><strong>USDC Operations:</strong> 0.01 USDC per transaction</li>\r\n                <li><strong>USDT Operations:</strong> 0.01 USDT per transaction</li>\r\n                <li><strong>WPHRS Operations:</strong> 0.0005 WPHRS per transaction</li>\r\n              </ul>\r\n              \r\n              <h3>Transaction Types</h3>\r\n              <p><strong>Friend Transfers:</strong> Send PHRS to randomly generated addresses</p>\r\n              <p><strong>Add Liquidity:</strong> Add liquidity to three pairs (USDC/WPHRS, USDC/USDT, WPHRS/USDT)</p>\r\n              <p><strong>Swaps:</strong> Perform token swaps across six different pairs</p>\r\n              \r\n              <h3>Safety Features</h3>\r\n              <ul>\r\n                <li>Balance verification before execution</li>\r\n                <li>Session-based operation for security</li>\r\n                <li>Real-time transaction monitoring</li>\r\n                <li>Automatic gas estimation and optimization</li>\r\n              </ul>\r\n            </div>\r\n            <button onClick={() => setShowHowItWorks(false)} className=\"button\">\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}
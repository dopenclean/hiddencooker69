{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/LENOVO/Desktop/Pbypass/hiddencooker/src/lib/automation.ts"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\n// Contract addresses and configuration\r\nconst RPC_URL = \"https://testnet.dplabs-internal.com\";\r\nconst BASE_API = \"https://api.pharosnetwork.xyz\";\r\nconst WPHRS_CONTRACT_ADDRESS = \"0x76aaaDA469D23216bE5f7C596fA25F282Ff9b364\";\r\nconst USDC_CONTRACT_ADDRESS = \"0x72df0bcd7276f2dFbAc900D1CE63c272C4BCcCED\";\r\nconst USDT_CONTRACT_ADDRESS = \"0xD4071393f8716661958F766DF660033b3d35fD29\";\r\nconst SWAP_ROUTER_ADDRESS = \"0x1A4DE519154Ae51200b0Ad7c90F7faC75547888a\";\r\nconst POSITION_MANAGER_ADDRESS = \"0xF8a1D4FF0f9b9Af7CE58E1fc1833688F3BFd6115\";\r\n\r\n// Fixed amounts\r\nconst PHRS_AMOUNT = 0.0005;\r\nconst USDC_AMOUNT = 0.01;\r\nconst USDT_AMOUNT = 0.01;\r\nconst WPHRS_AMOUNT = 0.0005;\r\n\r\n// ABIs\r\nconst ERC20_ABI = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function allowance(address owner, address spender) view returns (uint256)\",\r\n  \"function approve(address spender, uint256 amount) returns (bool)\",\r\n  \"function decimals() view returns (uint8)\"\r\n];\r\n\r\nconst SWAP_ABI = [\r\n  \"function multicall(uint256 deadline, bytes[] calldata data) external payable\"\r\n];\r\n\r\nconst ADD_LP_ABI = [\r\n  \"function mint(tuple(address token0, address token1, uint24 fee, int24 tickLower, int24 tickUpper, uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min, address recipient, uint256 deadline) params) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1)\"\r\n];\r\n\r\nexport class AutomationService {\r\n  private provider: ethers.JsonRpcProvider;\r\n  private wallet: ethers.Wallet | null = null;\r\n  private logs: string[] = [];\r\n\r\n  constructor() {\r\n    this.provider = new ethers.JsonRpcProvider(RPC_URL);\r\n  }\r\n\r\n  setWallet(privateKey: string) {\r\n    this.wallet = new ethers.Wallet(privateKey, this.provider);\r\n  }\r\n\r\n  addLog(message: string) {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    this.logs.push(`${timestamp} | ${message}`);\r\n    return this.logs;\r\n  }\r\n\r\n  getLogs() {\r\n    return this.logs;\r\n  }\r\n\r\n  async getTokenBalance(contractAddress: string): Promise<number> {\r\n    try {\r\n      if (contractAddress === \"PHRS\") {\r\n        const balance = await this.provider.getBalance(this.wallet!.address);\r\n        return parseFloat(ethers.formatEther(balance));\r\n      } else {\r\n        const contract = new ethers.Contract(contractAddress, ERC20_ABI, this.provider);\r\n        const balance = await contract.balanceOf(this.wallet!.address);\r\n        const decimals = await contract.decimals();\r\n        return parseFloat(ethers.formatUnits(balance, decimals));\r\n      }\r\n    } catch (error) {\r\n      this.addLog(`Balance check failed: ${error}`);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  async approveToken(spenderAddress: string, contractAddress: string, amount: number): Promise<boolean> {\r\n    try {\r\n      const contract = new ethers.Contract(contractAddress, ERC20_ABI, this.wallet!);\r\n      const decimals = await contract.decimals();\r\n      const amountWei = ethers.parseUnits(amount.toString(), decimals);\r\n      \r\n      const allowance = await contract.allowance(this.wallet!.address, spenderAddress);\r\n      if (allowance < amountWei) {\r\n        const tx = await contract.approve(spenderAddress, ethers.MaxUint256);\r\n        await tx.wait();\r\n        this.addLog(\"Token approval successful\");\r\n        return true;\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      this.addLog(`Token approval failed: ${error}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async performTransfer(receiver: string): Promise<{ hash: string; blockNumber: number } | null> {\r\n    try {\r\n      const amountWei = ethers.parseEther(PHRS_AMOUNT.toString());\r\n      const gasPrice = ethers.parseUnits(\"1\", \"gwei\");\r\n      \r\n      const tx = {\r\n        to: receiver,\r\n        value: amountWei,\r\n        gasLimit: BigInt(21000),\r\n        maxFeePerGas: gasPrice,\r\n        maxPriorityFeePerGas: gasPrice\r\n      };\r\n\r\n      const transaction = await this.wallet!.sendTransaction(tx);\r\n      const receipt = await transaction.wait();\r\n      \r\n      return {\r\n        hash: transaction.hash,\r\n        blockNumber: receipt?.blockNumber || 0\r\n      };\r\n    } catch (error) {\r\n      this.addLog(`Transfer failed: ${error}`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async performAddLiquidity(token0: string, token1: string, amount0: number, amount1: number): Promise<{ hash: string; blockNumber: number } | null> {\r\n    try {\r\n      // Approve both tokens\r\n      await this.approveToken(POSITION_MANAGER_ADDRESS, token0, amount0);\r\n      await this.approveToken(POSITION_MANAGER_ADDRESS, token1, amount1);\r\n\r\n      const contract = new ethers.Contract(POSITION_MANAGER_ADDRESS, ADD_LP_ABI, this.wallet!);\r\n      \r\n      const token0Contract = new ethers.Contract(token0, ERC20_ABI, this.provider);\r\n      const token1Contract = new ethers.Contract(token1, ERC20_ABI, this.provider);\r\n      \r\n      const token0Decimals = await token0Contract.decimals();\r\n      const token1Decimals = await token1Contract.decimals();\r\n      \r\n      const amount0Desired = ethers.parseUnits(amount0.toString(), token0Decimals);\r\n      const amount1Desired = ethers.parseUnits(amount1.toString(), token1Decimals);\r\n\r\n      const params = {\r\n        token0: token0,\r\n        token1: token1,\r\n        fee: 500,\r\n        tickLower: -887270,\r\n        tickUpper: 887270,\r\n        amount0Desired: amount0Desired,\r\n        amount1Desired: amount1Desired,\r\n        amount0Min: BigInt(0),\r\n        amount1Min: BigInt(0),\r\n        recipient: this.wallet!.address,\r\n        deadline: BigInt(Math.floor(Date.now() / 1000) + 600)\r\n      };\r\n\r\n      const tx = await contract.mint(params);\r\n      const receipt = await tx.wait();\r\n      \r\n      return {\r\n        hash: tx.hash,\r\n        blockNumber: receipt?.blockNumber || 0\r\n      };\r\n    } catch (error) {\r\n      this.addLog(`Add liquidity failed: ${error}`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async performSwap(fromToken: string, toToken: string, amount: number): Promise<{ hash: string; blockNumber: number } | null> {\r\n    try {\r\n      await this.approveToken(SWAP_ROUTER_ADDRESS, fromToken, amount);\r\n      \r\n      const contract = new ethers.Contract(SWAP_ROUTER_ADDRESS, SWAP_ABI, this.wallet!);\r\n      \r\n      const tokenContract = new ethers.Contract(fromToken, ERC20_ABI, this.provider);\r\n      const decimals = await tokenContract.decimals();\r\n      const amountWei = ethers.parseUnits(amount.toString(), decimals);\r\n      \r\n      const deadline = BigInt(Math.floor(Date.now() / 1000) + 300);\r\n      \r\n      // Create swap data\r\n      const swapData = ethers.AbiCoder.defaultAbiCoder().encode(\r\n        [\"address\", \"address\", \"uint256\", \"address\", \"uint256\", \"uint256\", \"uint256\"],\r\n        [fromToken, toToken, 500, this.wallet!.address, amountWei, BigInt(0), BigInt(0)]\r\n      );\r\n      \r\n      const multicallData = [\"0x04e45aaf\" + swapData.slice(2)];\r\n      \r\n      const tx = await contract.multicall(deadline, multicallData);\r\n      const receipt = await tx.wait();\r\n      \r\n      return {\r\n        hash: tx.hash,\r\n        blockNumber: receipt?.blockNumber || 0\r\n      };\r\n    } catch (error) {\r\n      this.addLog(`Swap failed: ${error}`);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  generateRandomAddress(): string {\r\n    return ethers.Wallet.createRandom().address;\r\n  }\r\n\r\n  async loginToPharos(): Promise<boolean> {\r\n    try {\r\n      const message = \"pharos\";\r\n      const signature = await this.wallet!.signMessage(message);\r\n      \r\n      const response = await fetch(`${BASE_API}/user/login?address=${this.wallet!.address}&signature=${signature}&wallet=OKX+Wallet&invite_code=i1oh5oYCBA2Ts4MY`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json, text/plain, */*',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n      const data = await response.json();\r\n      return data.code === 0;\r\n    } catch (error) {\r\n      this.addLog(`Login failed: ${error}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async verifyTask(txHash: string): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${BASE_API}/task/verify?address=${this.wallet!.address}&task_id=103&tx_hash=${txHash}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Accept': 'application/json, text/plain, */*',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n      \r\n      const data = await response.json();\r\n      return data.code === 0;\r\n    } catch (error) {\r\n      this.addLog(`Task verification failed: ${error}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async processTransfers(count: number): Promise<void> {\r\n    if (count === 0) return;\r\n    \r\n    this.addLog(\"=== FRIEND TRANSFERS ===\");\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      this.addLog(`Transfer ${i + 1}/${count}`);\r\n      \r\n      const receiver = this.generateRandomAddress();\r\n      const balance = await this.getTokenBalance(\"PHRS\");\r\n      \r\n      this.addLog(`Balance: ${balance} PHRS`);\r\n      this.addLog(`Amount: ${PHRS_AMOUNT} PHRS`);\r\n      this.addLog(`To: ${receiver.slice(0, 6)}...${receiver.slice(-6)}`);\r\n      \r\n      if (balance <= PHRS_AMOUNT) {\r\n        this.addLog(\"Insufficient PHRS balance\");\r\n        break;\r\n      }\r\n      \r\n      const result = await this.performTransfer(receiver);\r\n      if (result) {\r\n        const explorer = `https://testnet.pharosscan.xyz/tx/${result.hash}`;\r\n        this.addLog(\"Transfer successful\");\r\n        this.addLog(`Block: ${result.blockNumber}`);\r\n        this.addLog(`Hash: ${result.hash}`);\r\n        this.addLog(`Explorer: ${explorer}`);\r\n        \r\n        const verified = await this.verifyTask(result.hash);\r\n        if (verified) {\r\n          this.addLog(\"Task verified\");\r\n        } else {\r\n          this.addLog(\"Task verification failed\");\r\n        }\r\n      } else {\r\n        this.addLog(\"Transfer failed\");\r\n      }\r\n      \r\n      // Random delay\r\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 4000 + 3000));\r\n    }\r\n  }\r\n\r\n  async processLiquidity(count: number): Promise<void> {\r\n    if (count === 0) return;\r\n    \r\n    this.addLog(\"=== ADD LIQUIDITY ===\");\r\n    \r\n    const pairs = [\r\n      { name: \"USDC/WPHRS\", token0: USDC_CONTRACT_ADDRESS, token1: WPHRS_CONTRACT_ADDRESS, amount0: USDC_AMOUNT, amount1: WPHRS_AMOUNT },\r\n      { name: \"USDC/USDT\", token0: USDC_CONTRACT_ADDRESS, token1: USDT_CONTRACT_ADDRESS, amount0: USDC_AMOUNT, amount1: USDT_AMOUNT },\r\n      { name: \"WPHRS/USDT\", token0: WPHRS_CONTRACT_ADDRESS, token1: USDT_CONTRACT_ADDRESS, amount0: WPHRS_AMOUNT, amount1: USDT_AMOUNT }\r\n    ];\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      this.addLog(`Liquidity ${i + 1}/${count}`);\r\n      \r\n      const pair = pairs[i % pairs.length];\r\n      this.addLog(`Pair: ${pair.name}`);\r\n      this.addLog(`Amount: ${pair.amount0} + ${pair.amount1}`);\r\n      \r\n      const balance0 = await this.getTokenBalance(pair.token0);\r\n      const balance1 = await this.getTokenBalance(pair.token1);\r\n      \r\n      this.addLog(`Balance: ${balance0}, ${balance1}`);\r\n      \r\n      if (balance0 <= pair.amount0 || balance1 <= pair.amount1) {\r\n        this.addLog(\"Insufficient balance\");\r\n        continue;\r\n      }\r\n      \r\n      const result = await this.performAddLiquidity(pair.token0, pair.token1, pair.amount0, pair.amount1);\r\n      if (result) {\r\n        const explorer = `https://testnet.pharosscan.xyz/tx/${result.hash}`;\r\n        this.addLog(\"Liquidity added successfully\");\r\n        this.addLog(`Block: ${result.blockNumber}`);\r\n        this.addLog(`Hash: ${result.hash}`);\r\n        this.addLog(`Explorer: ${explorer}`);\r\n      } else {\r\n        this.addLog(\"Add liquidity failed\");\r\n      }\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 4000 + 3000));\r\n    }\r\n  }\r\n\r\n  async processSwaps(count: number): Promise<void> {\r\n    if (count === 0) return;\r\n    \r\n    this.addLog(\"=== SWAPS ===\");\r\n    \r\n    const swaps = [\r\n      { from: WPHRS_CONTRACT_ADDRESS, to: USDC_CONTRACT_ADDRESS, amount: WPHRS_AMOUNT, name: \"WPHRS → USDC\" },\r\n      { from: WPHRS_CONTRACT_ADDRESS, to: USDT_CONTRACT_ADDRESS, amount: WPHRS_AMOUNT, name: \"WPHRS → USDT\" },\r\n      { from: USDC_CONTRACT_ADDRESS, to: WPHRS_CONTRACT_ADDRESS, amount: USDC_AMOUNT, name: \"USDC → WPHRS\" },\r\n      { from: USDT_CONTRACT_ADDRESS, to: WPHRS_CONTRACT_ADDRESS, amount: USDT_AMOUNT, name: \"USDT → WPHRS\" },\r\n      { from: USDC_CONTRACT_ADDRESS, to: USDT_CONTRACT_ADDRESS, amount: USDC_AMOUNT, name: \"USDC → USDT\" },\r\n      { from: USDT_CONTRACT_ADDRESS, to: USDC_CONTRACT_ADDRESS, amount: USDT_AMOUNT, name: \"USDT → USDC\" }\r\n    ];\r\n    \r\n    for (let i = 0; i < count; i++) {\r\n      this.addLog(`Swap ${i + 1}/${count}`);\r\n      \r\n      const swap = swaps[i % swaps.length];\r\n      this.addLog(`Swap: ${swap.name}`);\r\n      this.addLog(`Amount: ${swap.amount}`);\r\n      \r\n      const balance = await this.getTokenBalance(swap.from);\r\n      this.addLog(`Balance: ${balance}`);\r\n      \r\n      if (balance <= swap.amount) {\r\n        this.addLog(\"Insufficient balance\");\r\n        continue;\r\n      }\r\n      \r\n      const result = await this.performSwap(swap.from, swap.to, swap.amount);\r\n      if (result) {\r\n        const explorer = `https://testnet.pharosscan.xyz/tx/${result.hash}`;\r\n        this.addLog(\"Swap successful\");\r\n        this.addLog(`Block: ${result.blockNumber}`);\r\n        this.addLog(`Hash: ${result.hash}`);\r\n        this.addLog(`Explorer: ${explorer}`);\r\n      } else {\r\n        this.addLog(\"Swap failed\");\r\n      }\r\n      \r\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 4000 + 3000));\r\n    }\r\n  }\r\n\r\n  async runAutomation(\r\n    privateKey: string,\r\n    transferCount: number,\r\n    liquidityCount: number,\r\n    swapCount: number,\r\n    onLogUpdate: (logs: string[]) => void\r\n  ): Promise<void> {\r\n    try {\r\n      this.setWallet(privateKey);\r\n      this.addLog(\"Starting automation...\");\r\n      onLogUpdate(this.getLogs());\r\n      \r\n      // Login\r\n      const loginSuccess = await this.loginToPharos();\r\n      if (!loginSuccess) {\r\n        this.addLog(\"Login failed\");\r\n        onLogUpdate(this.getLogs());\r\n        return;\r\n      }\r\n      this.addLog(\"Login successful\");\r\n      onLogUpdate(this.getLogs());\r\n      \r\n      // Process operations\r\n      await this.processTransfers(transferCount);\r\n      onLogUpdate(this.getLogs());\r\n      \r\n      await this.processLiquidity(liquidityCount);\r\n      onLogUpdate(this.getLogs());\r\n      \r\n      await this.processSwaps(swapCount);\r\n      onLogUpdate(this.getLogs());\r\n      \r\n      this.addLog(\"Automation completed!\");\r\n      onLogUpdate(this.getLogs());\r\n      \r\n    } catch (error) {\r\n      this.addLog(`Automation error: ${error}`);\r\n      onLogUpdate(this.getLogs());\r\n    }\r\n  }\r\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 494, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/LENOVO/Desktop/Pbypass/hiddencooker/src/app/automation/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { AutomationService } from '@/lib/automation';\r\n\r\n// Contract addresses\r\nconst WPHRS_CONTRACT_ADDRESS = \"0x76aaaDA469D23216bE5f7C596fA25F282Ff9b364\";\r\nconst USDC_CONTRACT_ADDRESS = \"0x72df0bcd7276f2dFbAc900D1CE63c272C4BCcCED\";\r\nconst USDT_CONTRACT_ADDRESS = \"0xD4071393f8716661958F766DF660033b3d35fD29\";\r\n\r\ninterface AutomationState {\r\n  step: number;\r\n  privateKey: string;\r\n  transferCount: number;\r\n  liquidityCount: number;\r\n  swapCount: number;\r\n  proxyChoice: number;\r\n  rotateProxy: boolean;\r\n  isRunning: boolean;\r\n  logs: string[];\r\n  balanceCheck: {\r\n    phrs: number;\r\n    wphrs: number;\r\n    usdc: number;\r\n    usdt: number;\r\n  } | null;\r\n}\r\n\r\nexport default function AutomationPage() {\r\n  const router = useRouter();\r\n  const [automationService] = useState(() => new AutomationService());\r\n  const [state, setState] = useState<AutomationState>({\r\n    step: 1,\r\n    privateKey: '',\r\n    transferCount: 0,\r\n    liquidityCount: 0,\r\n    swapCount: 0,\r\n    proxyChoice: 0,\r\n    rotateProxy: false,\r\n    isRunning: false,\r\n    logs: [],\r\n    balanceCheck: null\r\n  });\r\n\r\n  const [showPrivacy, setShowPrivacy] = useState(false);\r\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\r\n\r\n  const addLog = (message: string) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      logs: [...prev.logs, `${new Date().toLocaleTimeString()} | ${message}`]\r\n    }));\r\n  };\r\n\r\n  const nextStep = () => {\r\n    setState(prev => ({ ...prev, step: prev.step + 1 }));\r\n  };\r\n\r\n  const handlePrivateKeySubmit = () => {\r\n    if (state.privateKey.trim()) {\r\n      nextStep();\r\n    }\r\n  };\r\n\r\n  const handleTransferCountSubmit = () => {\r\n    if (state.transferCount >= 0) {\r\n      nextStep();\r\n    }\r\n  };\r\n\r\n  const handleLiquidityCountSubmit = () => {\r\n    if (state.liquidityCount >= 0) {\r\n      nextStep();\r\n    }\r\n  };\r\n\r\n  const handleSwapCountSubmit = () => {\r\n    if (state.swapCount >= 0) {\r\n      nextStep();\r\n    }\r\n  };\r\n\r\n  const handleProxyChoice = (choice: number) => {\r\n    setState(prev => ({ ...prev, proxyChoice: choice }));\r\n    if (choice === 3) {\r\n      nextStep();\r\n    }\r\n  };\r\n\r\n  const handleRotateProxy = (rotate: boolean) => {\r\n    setState(prev => ({ ...prev, rotateProxy: rotate }));\r\n    nextStep();\r\n  };\r\n\r\n  const checkWalletBalance = async () => {\r\n    try {\r\n      automationService.setWallet(state.privateKey);\r\n      \r\n      const phrs = await automationService.getTokenBalance(\"PHRS\");\r\n      const wphrs = await automationService.getTokenBalance(WPHRS_CONTRACT_ADDRESS);\r\n      const usdc = await automationService.getTokenBalance(USDC_CONTRACT_ADDRESS);\r\n      const usdt = await automationService.getTokenBalance(USDT_CONTRACT_ADDRESS);\r\n      \r\n      setState(prev => ({\r\n        ...prev,\r\n        balanceCheck: { phrs, wphrs, usdc, usdt }\r\n      }));\r\n      \r\n      nextStep();\r\n    } catch (error) {\r\n      addLog(`Balance check failed: ${error}`);\r\n    }\r\n  };\r\n\r\n  const startAutomation = async () => {\r\n    setState(prev => ({ ...prev, isRunning: true }));\r\n    \r\n    try {\r\n      await automationService.runAutomation(\r\n        state.privateKey,\r\n        state.transferCount,\r\n        state.liquidityCount,\r\n        state.swapCount,\r\n        (logs) => setState(prev => ({ ...prev, logs }))\r\n      );\r\n    } catch (error) {\r\n      addLog(`Automation error: ${error}`);\r\n    } finally {\r\n      setState(prev => ({ ...prev, isRunning: false }));\r\n    }\r\n  };\r\n\r\n  const renderStep = () => {\r\n    switch (state.step) {\r\n      case 1:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Enter Wallet Private Key</h2>\r\n              <p className=\"text-gray-600\">Please enter your wallet private key to continue</p>\r\n            </div>\r\n            <div className=\"space-y-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Private Key</label>\r\n                <input\r\n                  type=\"password\"\r\n                  value={state.privateKey}\r\n                  onChange={(e) => setState(prev => ({ ...prev, privateKey: e.target.value }))}\r\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                  placeholder=\"Enter your wallet private key\"\r\n                />\r\n              </div>\r\n              <button\r\n                onClick={handlePrivateKeySubmit}\r\n                disabled={!state.privateKey.trim()}\r\n                className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-6 rounded-lg hover:from-blue-700 hover:to-blue-800 disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed transition-all duration-200 font-medium\"\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 2:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Friend Transfers</h2>\r\n              <p className=\"text-gray-600\">Configure how many friend transfers to perform</p>\r\n            </div>\r\n            <div className=\"space-y-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">How many friend transfers?</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={state.transferCount}\r\n                  onChange={(e) => setState(prev => ({ ...prev, transferCount: parseInt(e.target.value) || 0 }))}\r\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                  placeholder=\"0\"\r\n                  min=\"0\"\r\n                />\r\n              </div>\r\n              <button\r\n                onClick={handleTransferCountSubmit}\r\n                className=\"w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-6 rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-200 font-medium\"\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 3:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Add Liquidity</h2>\r\n              <p className=\"text-gray-600\">Configure how many liquidity transactions to perform</p>\r\n            </div>\r\n            <div className=\"space-y-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">How many add liquidity transactions?</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={state.liquidityCount}\r\n                  onChange={(e) => setState(prev => ({ ...prev, liquidityCount: parseInt(e.target.value) || 0 }))}\r\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                  placeholder=\"0\"\r\n                  min=\"0\"\r\n                />\r\n              </div>\r\n              <button\r\n                onClick={handleLiquidityCountSubmit}\r\n                className=\"w-full bg-gradient-to-r from-purple-600 to-purple-700 text-white py-3 px-6 rounded-lg hover:from-purple-700 hover:to-purple-800 transition-all duration-200 font-medium\"\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 4:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-orange-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Swap Transactions</h2>\r\n              <p className=\"text-gray-600\">Configure how many swap transactions to perform</p>\r\n            </div>\r\n            <div className=\"space-y-6\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">How many swap transactions?</label>\r\n                <input\r\n                  type=\"number\"\r\n                  value={state.swapCount}\r\n                  onChange={(e) => setState(prev => ({ ...prev, swapCount: parseInt(e.target.value) || 0 }))}\r\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors\"\r\n                  placeholder=\"0\"\r\n                  min=\"0\"\r\n                />\r\n              </div>\r\n              <button\r\n                onClick={handleSwapCountSubmit}\r\n                className=\"w-full bg-gradient-to-r from-orange-600 to-orange-700 text-white py-3 px-6 rounded-lg hover:from-orange-700 hover:to-orange-800 transition-all duration-200 font-medium\"\r\n              >\r\n                Next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 5:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9m0 9c-5 0-9-4-9-9s4-9 9-9\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Proxy Settings</h2>\r\n              <p className=\"text-gray-600\">Choose your proxy configuration</p>\r\n            </div>\r\n            <div className=\"space-y-4\">\r\n              <button\r\n                onClick={() => handleProxyChoice(1)}\r\n                className=\"w-full bg-gradient-to-r from-gray-600 to-gray-700 text-white py-4 px-6 rounded-lg hover:from-gray-700 hover:to-gray-800 transition-all duration-200 font-medium\"\r\n              >\r\n                Use Free Proxyscrape Proxy\r\n              </button>\r\n              <button\r\n                onClick={() => handleProxyChoice(2)}\r\n                className=\"w-full bg-gradient-to-r from-gray-600 to-gray-700 text-white py-4 px-6 rounded-lg hover:from-gray-700 hover:to-gray-800 transition-all duration-200 font-medium\"\r\n              >\r\n                Use Custom Proxy\r\n              </button>\r\n              <button\r\n                onClick={() => handleProxyChoice(3)}\r\n                className=\"w-full bg-gradient-to-r from-gray-600 to-gray-700 text-white py-4 px-6 rounded-lg hover:from-gray-700 hover:to-gray-800 transition-all duration-200 font-medium\"\r\n              >\r\n                No Proxy\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 6:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Rotate Invalid Proxy?</h2>\r\n              <p className=\"text-gray-600\">Choose whether to rotate invalid proxies</p>\r\n            </div>\r\n            <div className=\"space-y-4\">\r\n              <button\r\n                onClick={() => handleRotateProxy(true)}\r\n                className=\"w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-4 px-6 rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-200 font-medium\"\r\n              >\r\n                YES\r\n              </button>\r\n              <button\r\n                onClick={() => handleRotateProxy(false)}\r\n                className=\"w-full bg-gradient-to-r from-red-600 to-red-700 text-white py-4 px-6 rounded-lg hover:from-red-700 hover:to-red-800 transition-all duration-200 font-medium\"\r\n              >\r\n                NO\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 7:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Cost Calculation</h2>\r\n              <p className=\"text-gray-600\">Review your transaction summary and estimated costs</p>\r\n            </div>\r\n            <div className=\"space-y-6\">\r\n              <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 p-6 rounded-lg border border-gray-200\">\r\n                <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                  <svg className=\"w-5 h-5 mr-2 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\r\n                  </svg>\r\n                  Transaction Summary\r\n                </h3>\r\n                <div className=\"space-y-2 text-gray-700\">\r\n                  <p className=\"flex justify-between\">\r\n                    <span>Friend Transfers:</span>\r\n                    <span className=\"font-medium\">{state.transferCount}</span>\r\n                  </p>\r\n                  <p className=\"flex justify-between\">\r\n                    <span>Add Liquidity:</span>\r\n                    <span className=\"font-medium\">{state.liquidityCount}</span>\r\n                  </p>\r\n                  <p className=\"flex justify-between\">\r\n                    <span>Swaps:</span>\r\n                    <span className=\"font-medium\">{state.swapCount}</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 p-6 rounded-lg border border-blue-200\">\r\n                <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                  <svg className=\"w-5 h-5 mr-2 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\r\n                  </svg>\r\n                  Estimated Token Requirements\r\n                </h3>\r\n                <div className=\"space-y-2 text-gray-700\">\r\n                  <p className=\"flex justify-between\">\r\n                    <span>PHRS:</span>\r\n                    <span className=\"font-medium\">{calculatePHRS()} (including gas)</span>\r\n                  </p>\r\n                  <p className=\"flex justify-between\">\r\n                    <span>WPHRS:</span>\r\n                    <span className=\"font-medium\">{calculateWPHRS()}</span>\r\n                  </p>\r\n                  <p className=\"flex justify-between\">\r\n                    <span>USDC:</span>\r\n                    <span className=\"font-medium\">{calculateUSDC()}</span>\r\n                  </p>\r\n                  <p className=\"flex justify-between\">\r\n                    <span>USDT:</span>\r\n                    <span className=\"font-medium\">{calculateUSDT()}</span>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <button\r\n                onClick={checkWalletBalance}\r\n                className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-6 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-medium\"\r\n              >\r\n                Check Wallet Balance\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 8:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Wallet Balance Check</h2>\r\n              <p className=\"text-gray-600\">Verifying your wallet balances</p>\r\n            </div>\r\n            <div className=\"space-y-6\">\r\n              {state.balanceCheck ? (\r\n                <div className=\"space-y-6\">\r\n                  <div className=\"bg-gradient-to-r from-gray-50 to-gray-100 p-6 rounded-lg border border-gray-200\">\r\n                    <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                      <svg className=\"w-5 h-5 mr-2 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z\" />\r\n                      </svg>\r\n                      Current Balances\r\n                    </h3>\r\n                    <div className=\"space-y-2 text-gray-700\">\r\n                      <p className=\"flex justify-between\">\r\n                        <span>PHRS:</span>\r\n                        <span className=\"font-medium\">{state.balanceCheck.phrs.toFixed(4)}</span>\r\n                      </p>\r\n                      <p className=\"flex justify-between\">\r\n                        <span>WPHRS:</span>\r\n                        <span className=\"font-medium\">{state.balanceCheck.wphrs.toFixed(4)}</span>\r\n                      </p>\r\n                      <p className=\"flex justify-between\">\r\n                        <span>USDC:</span>\r\n                        <span className=\"font-medium\">{state.balanceCheck.usdc.toFixed(4)}</span>\r\n                      </p>\r\n                      <p className=\"flex justify-between\">\r\n                        <span>USDT:</span>\r\n                        <span className=\"font-medium\">{state.balanceCheck.usdt.toFixed(4)}</span>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"bg-gradient-to-r from-blue-50 to-blue-100 p-6 rounded-lg border border-blue-200\">\r\n                    <h3 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\r\n                      <svg className=\"w-5 h-5 mr-2 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\r\n                      </svg>\r\n                      Required Amounts\r\n                    </h3>\r\n                    <div className=\"space-y-2 text-gray-700\">\r\n                      <p className=\"flex justify-between\">\r\n                        <span>PHRS:</span>\r\n                        <span className=\"font-medium\">{calculatePHRS()}</span>\r\n                      </p>\r\n                      <p className=\"flex justify-between\">\r\n                        <span>WPHRS:</span>\r\n                        <span className=\"font-medium\">{calculateWPHRS()}</span>\r\n                      </p>\r\n                      <p className=\"flex justify-between\">\r\n                        <span>USDC:</span>\r\n                        <span className=\"font-medium\">{calculateUSDC()}</span>\r\n                      </p>\r\n                      <p className=\"flex justify-between\">\r\n                        <span>USDT:</span>\r\n                        <span className=\"font-medium\">{calculateUSDT()}</span>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  {hasInsufficientBalance() ? (\r\n                    <div className=\"bg-gradient-to-r from-red-50 to-red-100 p-6 rounded-lg border border-red-200\">\r\n                      <h3 className=\"font-semibold text-red-800 mb-2 flex items-center\">\r\n                        <svg className=\"w-5 h-5 mr-2 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n                        </svg>\r\n                        ⚠️ Insufficient Balance\r\n                      </h3>\r\n                      <p className=\"text-red-700\">Please ensure you have enough tokens before proceeding.</p>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"bg-gradient-to-r from-green-50 to-green-100 p-6 rounded-lg border border-green-200\">\r\n                      <h3 className=\"font-semibold text-green-800 mb-2 flex items-center\">\r\n                        <svg className=\"w-5 h-5 mr-2 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                        </svg>\r\n                        ✅ Sufficient Balance\r\n                      </h3>\r\n                      <p className=\"text-green-700\">You have enough tokens to proceed.</p>\r\n                    </div>\r\n                  )}\r\n                  <button\r\n                    onClick={nextStep}\r\n                    disabled={hasInsufficientBalance()}\r\n                    className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-6 rounded-lg hover:from-blue-700 hover:to-blue-800 disabled:from-gray-400 disabled:to-gray-500 disabled:cursor-not-allowed transition-all duration-200 font-medium\"\r\n                  >\r\n                    Continue\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <div className=\"bg-gradient-to-r from-yellow-50 to-yellow-100 p-6 rounded-lg border border-yellow-200\">\r\n                  <div className=\"flex items-center justify-center\">\r\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-600\"></div>\r\n                    <span className=\"ml-3 text-yellow-800\">Checking wallet balances...</span>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 9:\r\n        return (\r\n          <div className=\"max-w-md mx-auto\">\r\n            <div className=\"text-center mb-8\">\r\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                </svg>\r\n              </div>\r\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">You are ready to go!</h2>\r\n              <p className=\"text-gray-600\">All checks passed. Ready to start automation.</p>\r\n            </div>\r\n            <div className=\"space-y-6\">\r\n              <div className=\"bg-gradient-to-r from-green-50 to-green-100 p-6 rounded-lg border border-green-200\">\r\n                <div className=\"flex items-center\">\r\n                  <svg className=\"w-6 h-6 text-green-600 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                  </svg>\r\n                  <p className=\"text-green-800 font-medium\">All checks passed. Ready to start automation.</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex space-x-4\">\r\n                <button\r\n                  onClick={startAutomation}\r\n                  className=\"flex-1 bg-gradient-to-r from-green-600 to-green-700 text-white py-3 px-6 rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-200 font-medium\"\r\n                >\r\n                  Let's Go\r\n                </button>\r\n                <button\r\n                  onClick={() => router.push('/')}\r\n                  className=\"flex-1 bg-gradient-to-r from-red-600 to-red-700 text-white py-3 px-6 rounded-lg hover:from-red-700 hover:to-red-800 transition-all duration-200 font-medium\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const calculatePHRS = () => {\r\n    const gasBuffer = (state.transferCount + state.liquidityCount + state.swapCount) * 0.001;\r\n    return (state.transferCount * 0.0005 + gasBuffer).toFixed(4);\r\n  };\r\n\r\n  const calculateWPHRS = () => {\r\n    const lpPerPair = Math.floor(state.liquidityCount / 3);\r\n    const lpRemainder = state.liquidityCount % 3;\r\n    const wphrsFromLp = (lpPerPair * 2 + Math.max(0, lpRemainder - 2) + Math.min(lpRemainder, 1)) * 0.0005;\r\n    \r\n    const swapPerType = Math.floor(state.swapCount / 6);\r\n    const swapRemainder = state.swapCount % 6;\r\n    const wphrsFromSwap = swapPerType * 2 * 0.0005;\r\n    \r\n    let additionalWphrs = 0;\r\n    if (swapRemainder > 4) {\r\n      additionalWphrs = (swapRemainder - 4) * 0.0005;\r\n    }\r\n    \r\n    return (wphrsFromLp + wphrsFromSwap + additionalWphrs).toFixed(4);\r\n  };\r\n\r\n  const calculateUSDC = () => {\r\n    const lpPerPair = Math.floor(state.liquidityCount / 3);\r\n    const lpRemainder = state.liquidityCount % 3;\r\n    const usdcFromLp = (lpPerPair * 2 + Math.min(lpRemainder, 2)) * 0.01;\r\n    \r\n    const swapPerType = Math.floor(state.swapCount / 6);\r\n    const swapRemainder = state.swapCount % 6;\r\n    const usdcFromSwap = swapPerType * 2 * 0.01;\r\n    \r\n    let additionalUsdc = 0;\r\n    if (swapRemainder > 0) {\r\n      additionalUsdc = Math.min(swapRemainder, 2) * 0.01;\r\n    }\r\n    \r\n    return (usdcFromLp + usdcFromSwap + additionalUsdc).toFixed(4);\r\n  };\r\n\r\n  const calculateUSDT = () => {\r\n    const lpPerPair = Math.floor(state.liquidityCount / 3);\r\n    const lpRemainder = state.liquidityCount % 3;\r\n    const usdtFromLp = (lpPerPair * 2 + Math.max(0, Math.min(lpRemainder - 1, 2))) * 0.01;\r\n    \r\n    const swapPerType = Math.floor(state.swapCount / 6);\r\n    const swapRemainder = state.swapCount % 6;\r\n    const usdtFromSwap = swapPerType * 2 * 0.01;\r\n    \r\n    let additionalUsdt = 0;\r\n    if (swapRemainder > 2) {\r\n      additionalUsdt = Math.min(swapRemainder - 2, 2) * 0.01;\r\n    }\r\n    \r\n    return (usdtFromLp + usdtFromSwap + additionalUsdt).toFixed(4);\r\n  };\r\n\r\n  const hasInsufficientBalance = () => {\r\n    if (!state.balanceCheck) return true;\r\n    \r\n    const requiredPHRS = parseFloat(calculatePHRS());\r\n    const requiredWPHRS = parseFloat(calculateWPHRS());\r\n    const requiredUSDC = parseFloat(calculateUSDC());\r\n    const requiredUSDT = parseFloat(calculateUSDT());\r\n    \r\n    return (\r\n      state.balanceCheck.phrs < requiredPHRS ||\r\n      state.balanceCheck.wphrs < requiredWPHRS ||\r\n      state.balanceCheck.usdc < requiredUSDC ||\r\n      state.balanceCheck.usdt < requiredUSDT\r\n    );\r\n  };\r\n\r\n  if (state.isRunning) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n        <div className=\"max-w-4xl mx-auto\">\r\n          <div className=\"bg-white rounded-2xl shadow-2xl p-8\">\r\n            <div className=\"flex justify-between items-center mb-8\">\r\n              <div className=\"flex items-center\">\r\n                <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mr-4\">\r\n                  <svg className=\"w-6 h-6 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n                  </svg>\r\n                </div>\r\n                <h1 className=\"text-3xl font-bold text-red-600\">⚠️ Don't close the browser until it's finished!</h1>\r\n              </div>\r\n              <div className=\"flex space-x-4\">\r\n                <button\r\n                  onClick={() => setShowPrivacy(true)}\r\n                  className=\"text-blue-600 hover:text-blue-800 transition-colors font-medium\"\r\n                >\r\n                  Privacy\r\n                </button>\r\n                <button\r\n                  onClick={() => setShowHowItWorks(true)}\r\n                  className=\"text-blue-600 hover:text-blue-800 transition-colors font-medium\"\r\n                >\r\n                  How it works\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"bg-black text-green-400 p-6 rounded-xl h-96 overflow-y-auto font-mono text-sm border border-gray-800\">\r\n              {state.logs.map((log, index) => (\r\n                <div key={index} className=\"mb-1\">\r\n                  {log}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <div className=\"bg-white rounded-2xl shadow-2xl p-8\">\r\n          <div className=\"flex justify-between items-center mb-8\">\r\n            <div className=\"flex items-center\">\r\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-4\">\r\n                <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                </svg>\r\n              </div>\r\n              <h1 className=\"text-3xl font-bold text-gray-900\">Pharos Automation</h1>\r\n            </div>\r\n            <div className=\"flex space-x-4\">\r\n              <button\r\n                onClick={() => setShowPrivacy(true)}\r\n                className=\"text-blue-600 hover:text-blue-800 transition-colors font-medium\"\r\n              >\r\n                Privacy\r\n              </button>\r\n              <button\r\n                onClick={() => setShowHowItWorks(true)}\r\n                className=\"text-blue-600 hover:text-blue-800 transition-colors font-medium\"\r\n              >\r\n                How it works\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          {renderStep()}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Privacy Modal */}\r\n      {showPrivacy && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-white rounded-2xl p-8 max-w-2xl max-h-96 overflow-y-auto shadow-2xl\">\r\n            <h2 className=\"text-2xl font-bold mb-6 text-gray-900\">Privacy Policy</h2>\r\n            <p className=\"text-gray-700 mb-6\">\r\n              We take your privacy and security very seriously. Here's how we protect your data:\r\n            </p>\r\n            <ul className=\"list-disc list-inside space-y-3 text-gray-700\">\r\n              <li>We do not store your wallet private keys anywhere on our servers</li>\r\n              <li>All operations are performed in your browser's memory only</li>\r\n              <li>We do not create or maintain any databases</li>\r\n              <li>Your private keys are never transmitted to our servers</li>\r\n              <li>All automation processes run locally in your browser</li>\r\n              <li>Session data is temporary and cleared when you close the browser</li>\r\n              <li>We do not collect, store, or share any personal information</li>\r\n            </ul>\r\n            <button\r\n              onClick={() => setShowPrivacy(false)}\r\n              className=\"mt-6 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-medium\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* How it works Modal */}\r\n      {showHowItWorks && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-white rounded-2xl p-8 max-w-2xl max-h-96 overflow-y-auto shadow-2xl\">\r\n            <h2 className=\"text-2xl font-bold mb-6 text-gray-900\">How It Works</h2>\r\n            <div className=\"space-y-6 text-gray-700\">\r\n              <div>\r\n                <h3 className=\"font-semibold text-lg text-gray-900 mb-3\">Fixed Transaction Amounts:</h3>\r\n                <ul className=\"list-disc list-inside space-y-2\">\r\n                  <li>PHRS Transfers: 0.0005 PHRS per transfer</li>\r\n                  <li>USDC: 0.01 USDC per transaction</li>\r\n                  <li>USDT: 0.01 USDT per transaction</li>\r\n                  <li>WPHRS: 0.0005 WPHRS per transaction</li>\r\n                </ul>\r\n              </div>\r\n              \r\n              <div>\r\n                <h3 className=\"font-semibold text-lg text-gray-900 mb-3\">Process Steps:</h3>\r\n                <ol className=\"list-decimal list-inside space-y-2\">\r\n                  <li>Enter your wallet private key (stored only in browser memory)</li>\r\n                  <li>Configure transaction counts for transfers, liquidity, and swaps</li>\r\n                  <li>Choose proxy settings (optional)</li>\r\n                  <li>System calculates required token amounts</li>\r\n                  <li>Wallet balance verification</li>\r\n                  <li>Automated execution with real-time logging</li>\r\n                </ol>\r\n              </div>\r\n              \r\n              <div>\r\n                <h3 className=\"font-semibold text-lg text-gray-900 mb-3\">Security Features:</h3>\r\n                <ul className=\"list-disc list-inside space-y-2\">\r\n                  <li>All operations run in your browser</li>\r\n                  <li>No server-side storage of private keys</li>\r\n                  <li>Real-time transaction monitoring</li>\r\n                  <li>Automatic error handling and retry logic</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n            <button\r\n              onClick={() => setShowHowItWorks(false)}\r\n              className=\"mt-6 bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200 font-medium\"\r\n            >\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}
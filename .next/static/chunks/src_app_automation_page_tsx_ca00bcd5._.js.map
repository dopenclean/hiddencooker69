{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/LENOVO/Desktop/Pbypass/hiddencooker/src/app/automation/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport './automation.css';\r\n\r\n// Types\r\ninterface WalletInfo {\r\n  address: string;\r\n  privateKey: string;\r\n}\r\n\r\ninterface TransactionCounts {\r\n  transfers: number;\r\n  liquidity: number;\r\n  swaps: number;\r\n}\r\n\r\ninterface ProxySettings {\r\n  type: 'free' | 'custom' | 'none';\r\n  rotate: boolean;\r\n}\r\n\r\ninterface TokenBalance {\r\n  phrs: number;\r\n  wphrs: number;\r\n  usdc: number;\r\n  usdt: number;\r\n}\r\n\r\ninterface CostCalculation {\r\n  phrs: number;\r\n  wphrs: number;\r\n  usdc: number;\r\n  usdt: number;\r\n}\r\n\r\n// Contract Addresses and Constants\r\nconst CONTRACTS = {\r\n  WPHRS: \"0x76aaaDA469D23216bE5f7C596fA25F282Ff9b364\",\r\n  USDC: \"0x72df0bcd7276f2dFbAc900D1CE63c272C4BCcCED\",\r\n  USDT: \"0xD4071393f8716661958F766DF660033b3d35fD29\",\r\n  SWAP_ROUTER: \"0x1A4DE519154Ae51200b0Ad7c90F7faC75547888a\",\r\n  POSITION_MANAGER: \"0xF8a1D4FF0f9b9Af7CE58E1fc1833688F3BFd6115\"\r\n};\r\n\r\nconst FIXED_AMOUNTS = {\r\n  PHRS: 0.0005,\r\n  USDC: 0.01,\r\n  USDT: 0.01,\r\n  WPHRS: 0.0005\r\n};\r\n\r\nconst RPC_URL = \"https://testnet.dplabs-internal.com\";\r\n\r\nconst ERC20_ABI = [\r\n  \"function balanceOf(address) view returns (uint256)\",\r\n  \"function decimals() view returns (uint8)\",\r\n  \"function allowance(address,address) view returns (uint256)\",\r\n  \"function approve(address,uint256) returns (bool)\"\r\n];\r\n\r\nexport default function AutomationPage() {\r\n  // Step management\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [wallet, setWallet] = useState<WalletInfo | null>(null);\r\n  const [transactionCounts, setTransactionCounts] = useState<TransactionCounts>({\r\n    transfers: 0,\r\n    liquidity: 0,\r\n    swaps: 0\r\n  });\r\n  const [proxySettings, setProxySettings] = useState<ProxySettings>({\r\n    type: 'none',\r\n    rotate: false\r\n  });\r\n  const [balances, setBalances] = useState<TokenBalance | null>(null);\r\n  const [costs, setCosts] = useState<CostCalculation | null>(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [logs, setLogs] = useState<string[]>([]);\r\n  \r\n  // Form states\r\n  const [privateKeyInput, setPrivateKeyInput] = useState('');\r\n  const [transferCount, setTransferCount] = useState('');\r\n  const [liquidityCount, setLiquidityCount] = useState('');\r\n  const [swapCount, setSwapCount] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [showPrivacy, setShowPrivacy] = useState(false);\r\n  const [showHowItWorks, setShowHowItWorks] = useState(false);\r\n\r\n  // Session ID for concurrent users\r\n  const [sessionId] = useState(() => Math.random().toString(36).substring(7));\r\n\r\n  // Add log entry\r\n  const addLog = (message: string) => {\r\n    const timestamp = new Date().toLocaleTimeString();\r\n    setLogs(prev => [...prev, `[${timestamp}] ${message}`]);\r\n  };\r\n\r\n  // Generate wallet from private key\r\n  const generateWallet = (privateKey: string): WalletInfo | null => {\r\n    try {\r\n      const wallet = new ethers.Wallet(privateKey);\r\n      return {\r\n        address: wallet.address,\r\n        privateKey: privateKey\r\n      };\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Get token balance\r\n  const getTokenBalance = async (tokenAddress: string, walletAddress: string): Promise<number> => {\r\n    try {\r\n      const provider = new ethers.JsonRpcProvider(RPC_URL);\r\n      \r\n      if (tokenAddress === \"PHRS\") {\r\n        const balance = await provider.getBalance(walletAddress);\r\n        return parseFloat(ethers.formatEther(balance));\r\n      }\r\n      \r\n      const contract = new ethers.Contract(tokenAddress, ERC20_ABI, provider);\r\n      const [balance, decimals] = await Promise.all([\r\n        contract.balanceOf(walletAddress),\r\n        contract.decimals()\r\n      ]);\r\n      \r\n      return parseFloat(ethers.formatUnits(balance, decimals));\r\n    } catch (error) {\r\n      console.error('Balance check failed:', error);\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  // Calculate costs\r\n  const calculateCosts = (counts: TransactionCounts): CostCalculation => {\r\n    // Transfer costs\r\n    const phrsFromTransfers = counts.transfers * FIXED_AMOUNTS.PHRS;\r\n    \r\n    // Liquidity costs (assume even distribution across 3 pairs)\r\n    const lpPerPair = Math.floor(counts.liquidity / 3);\r\n    const lpRemainder = counts.liquidity % 3;\r\n    \r\n    const usdcFromLp = (lpPerPair * 2 + Math.min(lpRemainder, 2)) * FIXED_AMOUNTS.USDC;\r\n    const usdtFromLp = (lpPerPair * 2 + Math.max(0, Math.min(lpRemainder - 1, 2))) * FIXED_AMOUNTS.USDT;\r\n    const wphrsFromLp = (lpPerPair * 2 + Math.max(0, lpRemainder - 2) + Math.min(lpRemainder, 1)) * FIXED_AMOUNTS.WPHRS;\r\n    \r\n    // Swap costs (assume even distribution across 6 swap types)\r\n    const swapPerType = Math.floor(counts.swaps / 6);\r\n    const swapRemainder = counts.swaps % 6;\r\n    \r\n    let usdcFromSwap = swapPerType * 2 * FIXED_AMOUNTS.USDC;\r\n    let usdtFromSwap = swapPerType * 2 * FIXED_AMOUNTS.USDT;\r\n    let wphrsFromSwap = swapPerType * 2 * FIXED_AMOUNTS.WPHRS;\r\n    \r\n    // Add remainder swaps\r\n    if (swapRemainder > 0) {\r\n      usdcFromSwap += Math.min(swapRemainder, 2) * FIXED_AMOUNTS.USDC;\r\n    }\r\n    if (swapRemainder > 2) {\r\n      usdtFromSwap += Math.min(swapRemainder - 2, 2) * FIXED_AMOUNTS.USDT;\r\n    }\r\n    if (swapRemainder > 4) {\r\n      wphrsFromSwap += (swapRemainder - 4) * FIXED_AMOUNTS.WPHRS;\r\n    }\r\n\r\n    // Gas buffer\r\n    const gasBuffer = (counts.transfers + counts.liquidity + counts.swaps) * 0.001;\r\n\r\n    return {\r\n      phrs: phrsFromTransfers + gasBuffer,\r\n      wphrs: wphrsFromLp + wphrsFromSwap,\r\n      usdc: usdcFromLp + usdcFromSwap,\r\n      usdt: usdtFromLp + usdtFromSwap\r\n    };\r\n  };\r\n\r\n  // Check balances\r\n  const checkBalances = async (walletAddress: string) => {\r\n    try {\r\n      const [phrsBalance, wphrsBalance, usdcBalance, usdtBalance] = await Promise.all([\r\n        getTokenBalance(\"PHRS\", walletAddress),\r\n        getTokenBalance(CONTRACTS.WPHRS, walletAddress),\r\n        getTokenBalance(CONTRACTS.USDC, walletAddress),\r\n        getTokenBalance(CONTRACTS.USDT, walletAddress)\r\n      ]);\r\n\r\n      return {\r\n        phrs: phrsBalance,\r\n        wphrs: wphrsBalance,\r\n        usdc: usdcBalance,\r\n        usdt: usdtBalance\r\n      };\r\n    } catch (error) {\r\n      console.error('Balance check failed:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Step handlers\r\n  const handlePrivateKeySubmit = () => {\r\n    if (!privateKeyInput.trim()) {\r\n      setError('Please enter your private key');\r\n      return;\r\n    }\r\n\r\n    const walletInfo = generateWallet(privateKeyInput.trim());\r\n    if (!walletInfo) {\r\n      setError('Invalid private key');\r\n      return;\r\n    }\r\n\r\n    setWallet(walletInfo);\r\n    setError('');\r\n    setCurrentStep(1);\r\n  };\r\n\r\n  const handleTransferCountSubmit = () => {\r\n    const count = parseInt(transferCount);\r\n    if (isNaN(count) || count < 0) {\r\n      setError('Please enter a valid number (0 or positive)');\r\n      return;\r\n    }\r\n\r\n    setTransactionCounts(prev => ({ ...prev, transfers: count }));\r\n    setError('');\r\n    setCurrentStep(2);\r\n  };\r\n\r\n  const handleLiquidityCountSubmit = () => {\r\n    const count = parseInt(liquidityCount);\r\n    if (isNaN(count) || count < 0) {\r\n      setError('Please enter a valid number (0 or positive)');\r\n      return;\r\n    }\r\n\r\n    setTransactionCounts(prev => ({ ...prev, liquidity: count }));\r\n    setError('');\r\n    setCurrentStep(3);\r\n  };\r\n\r\n  const handleSwapCountSubmit = () => {\r\n    const count = parseInt(swapCount);\r\n    if (isNaN(count) || count < 0) {\r\n      setError('Please enter a valid number (0 or positive)');\r\n      return;\r\n    }\r\n\r\n    setTransactionCounts(prev => ({ ...prev, swaps: count }));\r\n    setError('');\r\n    setCurrentStep(4);\r\n  };\r\n\r\n  const handleProxySelection = (type: 'free' | 'custom' | 'none') => {\r\n    if (type === 'none') {\r\n      setProxySettings({ type, rotate: false });\r\n      setCurrentStep(5);\r\n    } else {\r\n      setProxySettings(prev => ({ ...prev, type }));\r\n      setCurrentStep(4.5); // Intermediate step for rotation question\r\n    }\r\n  };\r\n\r\n  const handleRotateSelection = (rotate: boolean) => {\r\n    setProxySettings(prev => ({ ...prev, rotate }));\r\n    setCurrentStep(5);\r\n  };\r\n\r\n  const handleCostCalculation = async () => {\r\n    if (!wallet) return;\r\n\r\n    const calculatedCosts = calculateCosts(transactionCounts);\r\n    setCosts(calculatedCosts);\r\n\r\n    const walletBalances = await checkBalances(wallet.address);\r\n    setBalances(walletBalances);\r\n\r\n    setCurrentStep(6);\r\n  };\r\n\r\n  const checkSufficientBalance = (): boolean => {\r\n    if (!balances || !costs) return false;\r\n\r\n    return (\r\n      balances.phrs >= costs.phrs &&\r\n      balances.wphrs >= costs.wphrs &&\r\n      balances.usdc >= costs.usdc &&\r\n      balances.usdt >= costs.usdt\r\n    );\r\n  };\r\n\r\n  const startAutomation = async () => {\r\n    if (!wallet) return;\r\n    \r\n    setIsProcessing(true);\r\n    setCurrentStep(7);\r\n    addLog(\"🚀 Starting automation process...\");\r\n    addLog(`📧 Session ID: ${sessionId}`);\r\n    addLog(`👛 Wallet: ${wallet.address}`);\r\n    \r\n    try {\r\n      const { provider, signer } = getProviderAndSigner(wallet.privateKey);\r\n      \r\n      // Execute transfers\r\n      if (transactionCounts.transfers > 0) {\r\n        addLog(\"=== FRIEND TRANSFERS ===\");\r\n        for (let i = 0; i < transactionCounts.transfers; i++) {\r\n          addLog(`Transfer ${i + 1}/${transactionCounts.transfers}`);\r\n          \r\n          const receiver = generateRandomAddress();\r\n          addLog(`     To: ${receiver.slice(0, 6)}...${receiver.slice(-6)}`);\r\n          addLog(`     Amount: ${FIXED_AMOUNTS.PHRS} PHRS`);\r\n          \r\n          try {\r\n            const result = await performTransfer(receiver, FIXED_AMOUNTS.PHRS, signer);\r\n            addLog(`     ✅ Transfer successful`);\r\n            addLog(`     Hash: ${result.hash}`);\r\n            addLog(`     Block: ${result.blockNumber}`);\r\n            addLog(`     Explorer: https://testnet.pharosscan.xyz/tx/${result.hash}`);\r\n          } catch (error) {\r\n            addLog(`     ❌ Transfer failed: ${error}`);\r\n          }\r\n          \r\n          // Wait between transactions\r\n          await new Promise(resolve => setTimeout(resolve, 3000));\r\n        }\r\n      }\r\n      \r\n      // Execute liquidity additions\r\n      if (transactionCounts.liquidity > 0) {\r\n        addLog(\"=== ADD LIQUIDITY ===\");\r\n        const liquidityPairs = getLiquidityPairs();\r\n        \r\n        for (let i = 0; i < transactionCounts.liquidity; i++) {\r\n          addLog(`Liquidity ${i + 1}/${transactionCounts.liquidity}`);\r\n          \r\n          const pair = liquidityPairs[i % liquidityPairs.length];\r\n          addLog(`     Pair: ${pair.ticker0}/${pair.ticker1}`);\r\n          addLog(`     Amount: ${pair.amount0} ${pair.ticker0} + ${pair.amount1} ${pair.ticker1}`);\r\n          \r\n          try {\r\n            const result = await addLiquidity(\r\n              pair.token0, \r\n              pair.token1, \r\n              pair.amount0, \r\n              pair.amount1, \r\n              signer\r\n            );\r\n            addLog(`     ✅ Liquidity added successfully`);\r\n            addLog(`     Hash: ${result.hash}`);\r\n            addLog(`     Block: ${result.blockNumber}`);\r\n            addLog(`     Explorer: https://testnet.pharosscan.xyz/tx/${result.hash}`);\r\n          } catch (error) {\r\n            addLog(`     ❌ Add liquidity failed: ${error}`);\r\n          }\r\n          \r\n          await new Promise(resolve => setTimeout(resolve, 3000));\r\n        }\r\n      }\r\n      \r\n      // Execute swaps\r\n      if (transactionCounts.swaps > 0) {\r\n        addLog(\"=== SWAPS ===\");\r\n        const swapPairs = getSwapPairs();\r\n        \r\n        for (let i = 0; i < transactionCounts.swaps; i++) {\r\n          addLog(`Swap ${i + 1}/${transactionCounts.swaps}`);\r\n          \r\n          const pair = swapPairs[i % swapPairs.length];\r\n          addLog(`     Swap: ${pair.fromTicker} → ${pair.toTicker}`);\r\n          addLog(`     Amount: ${pair.amount} ${pair.fromTicker}`);\r\n          \r\n          try {\r\n            const result = await performSwap(\r\n              pair.fromToken, \r\n              pair.toToken, \r\n              pair.amount, \r\n              signer\r\n            );\r\n            addLog(`     ✅ Swap successful`);\r\n            addLog(`     Hash: ${result.hash}`);\r\n            addLog(`     Block: ${result.blockNumber}`);\r\n            addLog(`     Explorer: https://testnet.pharosscan.xyz/tx/${result.hash}`);\r\n          } catch (error) {\r\n            addLog(`     ❌ Swap failed: ${error}`);\r\n          }\r\n          \r\n          await new Promise(resolve => setTimeout(resolve, 3000));\r\n        }\r\n      }\r\n      \r\n      addLog(\"🎉 All operations completed successfully!\");\r\n      setIsProcessing(false);\r\n      \r\n    } catch (error) {\r\n      addLog(`❌ Automation failed: ${error}`);\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Auto-calculate costs when reaching step 5\r\n  useEffect(() => {\r\n    if (currentStep === 5) {\r\n      handleCostCalculation();\r\n    }\r\n  }, [currentStep]);\r\n\r\n  const renderStep = () => {\r\n    switch (currentStep) {\r\n      case 0:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>Enter your wallet private key</h2>\r\n            <input\r\n              type=\"password\"\r\n              className=\"input\"\r\n              placeholder=\"Private Key\"\r\n              value={privateKeyInput}\r\n              onChange={(e) => {\r\n                setPrivateKeyInput(e.target.value);\r\n                setError('');\r\n              }}\r\n            />\r\n            {error && <div className=\"error\">{error}</div>}\r\n            <button onClick={handlePrivateKeySubmit} className=\"button\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      case 1:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>How many friend transfers?</h2>\r\n            <input\r\n              type=\"number\"\r\n              className=\"input\"\r\n              placeholder=\"Number of transfers\"\r\n              value={transferCount}\r\n              onChange={(e) => {\r\n                setTransferCount(e.target.value);\r\n                setError('');\r\n              }}\r\n              min=\"0\"\r\n            />\r\n            {error && <div className=\"error\">{error}</div>}\r\n            <button onClick={handleTransferCountSubmit} className=\"button\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      case 2:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>How many add liquidity transactions?</h2>\r\n            <input\r\n              type=\"number\"\r\n              className=\"input\"\r\n              placeholder=\"Number of liquidity transactions\"\r\n              value={liquidityCount}\r\n              onChange={(e) => {\r\n                setLiquidityCount(e.target.value);\r\n                setError('');\r\n              }}\r\n              min=\"0\"\r\n            />\r\n            {error && <div className=\"error\">{error}</div>}\r\n            <button onClick={handleLiquidityCountSubmit} className=\"button\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      case 3:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>How many swap transactions?</h2>\r\n            <input\r\n              type=\"number\"\r\n              className=\"input\"\r\n              placeholder=\"Number of swap transactions\"\r\n              value={swapCount}\r\n              onChange={(e) => {\r\n                setSwapCount(e.target.value);\r\n                setError('');\r\n              }}\r\n              min=\"0\"\r\n            />\r\n            {error && <div className=\"error\">{error}</div>}\r\n            <button onClick={handleSwapCountSubmit} className=\"button\">\r\n              Next\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      case 4:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>Proxy Settings</h2>\r\n            <div className=\"button-group\">\r\n              <button\r\n                onClick={() => handleProxySelection('free')}\r\n                className=\"button secondary\"\r\n              >\r\n                Use Free Proxyscrape proxy\r\n              </button>\r\n              <button\r\n                onClick={() => handleProxySelection('custom')}\r\n                className=\"button secondary\"\r\n              >\r\n                Use custom proxy\r\n              </button>\r\n              <button\r\n                onClick={() => handleProxySelection('none')}\r\n                className=\"button secondary\"\r\n              >\r\n                No proxy\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 4.5:\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>Rotate invalid proxy?</h2>\r\n            <div className=\"button-group\">\r\n              <button\r\n                onClick={() => handleRotateSelection(true)}\r\n                className=\"button secondary\"\r\n              >\r\n                YES\r\n              </button>\r\n              <button\r\n                onClick={() => handleRotateSelection(false)}\r\n                className=\"button secondary\"\r\n              >\r\n                NO\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 6:\r\n        const hasSufficientBalance = checkSufficientBalance();\r\n        return (\r\n          <div className=\"step-container\">\r\n            <h2>Cost Calculation</h2>\r\n            <div className=\"cost-breakdown\">\r\n              <h3>Transaction Summary:</h3>\r\n              <ul>\r\n                <li>Friend Transfers: {transactionCounts.transfers}</li>\r\n                <li>Add Liquidity: {transactionCounts.liquidity}</li>\r\n                <li>Swaps: {transactionCounts.swaps}</li>\r\n              </ul>\r\n              \r\n              <h3>Required Tokens:</h3>\r\n              <div className=\"balance-comparison\">\r\n                <div className={`balance-item ${balances && costs && balances.phrs >= costs.phrs ? 'sufficient' : 'insufficient'}`}>\r\n                  <span>PHRS: {costs?.phrs.toFixed(4)} (Balance: {balances?.phrs.toFixed(4)})</span>\r\n                </div>\r\n                <div className={`balance-item ${balances && costs && balances.wphrs >= costs.wphrs ? 'sufficient' : 'insufficient'}`}>\r\n                  <span>WPHRS: {costs?.wphrs.toFixed(4)} (Balance: {balances?.wphrs.toFixed(4)})</span>\r\n                </div>\r\n                <div className={`balance-item ${balances && costs && balances.usdc >= costs.usdc ? 'sufficient' : 'insufficient'}`}>\r\n                  <span>USDC: {costs?.usdc.toFixed(4)} (Balance: {balances?.usdc.toFixed(4)})</span>\r\n                </div>\r\n                <div className={`balance-item ${balances && costs && balances.usdt >= costs.usdt ? 'sufficient' : 'insufficient'}`}>\r\n                  <span>USDT: {costs?.usdt.toFixed(4)} (Balance: {balances?.usdt.toFixed(4)})</span>\r\n                </div>\r\n              </div>\r\n              \r\n              {!hasSufficientBalance && (\r\n                <div className=\"warning\">\r\n                  ⚠️ Insufficient balance for one or more tokens. Please ensure you have enough tokens before proceeding.\r\n                </div>\r\n              )}\r\n              \r\n              {hasSufficientBalance && (\r\n                <div className=\"success-container\">\r\n                  <div className=\"success\">🎉 You are ready to go!</div>\r\n                  <div className=\"button-group\">\r\n                    <button onClick={startAutomation} className=\"button\">\r\n                      Let's Go\r\n                    </button>\r\n                    <button onClick={() => setCurrentStep(0)} className=\"button secondary\">\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 7:\r\n        return (\r\n          <div className=\"automation-container\">\r\n            <div className=\"warning-header\">\r\n              ⚠️ Don't close the browser until it's finished\r\n            </div>\r\n            <div className=\"logs-container\">\r\n              <h3>Live Logs:</h3>\r\n              <div className=\"logs\">\r\n                {logs.map((log, index) => (\r\n                  <div key={index} className=\"log-entry\">\r\n                    {log}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return <div>Unknown step</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"automation-page\">\r\n      {/* Header */}\r\n      <div className=\"header\">\r\n        <h1>Pharos Network Automation</h1>\r\n        <div className=\"header-links\">\r\n          <button\r\n            onClick={() => setShowPrivacy(true)}\r\n            className=\"link-button\"\r\n          >\r\n            Privacy\r\n          </button>\r\n          <button\r\n            onClick={() => setShowHowItWorks(true)}\r\n            className=\"link-button\"\r\n          >\r\n            How it works\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"content\">\r\n        {renderStep()}\r\n      </div>\r\n\r\n      {/* Privacy Modal */}\r\n      {showPrivacy && (\r\n        <div className=\"modal-overlay\" onClick={() => setShowPrivacy(false)}>\r\n          <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\r\n            <h2>Privacy Policy</h2>\r\n            <div className=\"modal-content\">\r\n              <p>\r\n                At Pharos Network Automation, we take your privacy and security seriously. \r\n                Here's what you need to know about how we handle your information:\r\n              </p>\r\n              <h3>Your Wallet Security</h3>\r\n              <p>\r\n                • We never store your private keys on our servers<br/>\r\n                • All operations are performed in your browser session only<br/>\r\n                • Your private key is used temporarily for transaction signing and then discarded<br/>\r\n                • We don't have any database or permanent storage system\r\n              </p>\r\n              <h3>Session-Based Processing</h3>\r\n              <p>\r\n                • Each user gets a unique session ID for concurrent usage<br/>\r\n                • Sessions are temporary and expire when you close the browser<br/>\r\n                • No personal data is collected or transmitted to external services\r\n              </p>\r\n              <h3>Transaction Privacy</h3>\r\n              <p>\r\n                • All transactions are performed directly on the blockchain<br/>\r\n                • We don't monitor or log your transaction activities<br/>\r\n                • Your wallet interactions remain completely private\r\n              </p>\r\n              <p className=\"emphasis\">\r\n                Your security is our top priority. This tool operates entirely client-side \r\n                to ensure maximum privacy and security for your assets.\r\n              </p>\r\n            </div>\r\n            <button onClick={() => setShowPrivacy(false)} className=\"button\">\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* How It Works Modal */}\r\n      {showHowItWorks && (\r\n        <div className=\"modal-overlay\" onClick={() => setShowHowItWorks(false)}>\r\n          <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\r\n            <h2>How It Works</h2>\r\n            <div className=\"modal-content\">\r\n              <h3>Step-by-Step Process</h3>\r\n              <ol>\r\n                <li><strong>Wallet Connection:</strong> Enter your private key to generate wallet address</li>\r\n                <li><strong>Transaction Configuration:</strong> Set how many transactions you want for each type</li>\r\n                <li><strong>Proxy Settings:</strong> Choose your preferred proxy configuration</li>\r\n                <li><strong>Balance Verification:</strong> System checks if you have sufficient tokens</li>\r\n                <li><strong>Automated Execution:</strong> Transactions are executed automatically</li>\r\n              </ol>\r\n              \r\n              <h3>Fixed Transaction Amounts</h3>\r\n              <p>To ensure consistency and prevent errors, we use fixed amounts for all transactions:</p>\r\n              <ul>\r\n                <li><strong>PHRS Transfers:</strong> 0.0005 PHRS per transaction</li>\r\n                <li><strong>USDC Operations:</strong> 0.01 USDC per transaction</li>\r\n                <li><strong>USDT Operations:</strong> 0.01 USDT per transaction</li>\r\n                <li><strong>WPHRS Operations:</strong> 0.0005 WPHRS per transaction</li>\r\n              </ul>\r\n              \r\n              <h3>Transaction Types</h3>\r\n              <p><strong>Friend Transfers:</strong> Send PHRS to randomly generated addresses</p>\r\n              <p><strong>Add Liquidity:</strong> Add liquidity to three pairs (USDC/WPHRS, USDC/USDT, WPHRS/USDT)</p>\r\n              <p><strong>Swaps:</strong> Perform token swaps across six different pairs</p>\r\n              \r\n              <h3>Safety Features</h3>\r\n              <ul>\r\n                <li>Balance verification before execution</li>\r\n                <li>Session-based operation for security</li>\r\n                <li>Real-time transaction monitoring</li>\r\n                <li>Automatic gas estimation and optimization</li>\r\n              </ul>\r\n            </div>\r\n            <button onClick={() => setShowHowItWorks(false)} className=\"button\">\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}